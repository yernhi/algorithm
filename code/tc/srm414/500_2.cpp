#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;

const int MAXN = 50;
typedef pair<char, int> pii;

typedef pair< char, pii > piii;

class StringInterspersal {
    public:
        string minimum(vector <string> W) {
            int sz = W.size();
            int pos[MAXN];
            memset(pos,0,sizeof(pos));
            string ans;
            priority_queue <piii, vector< piii >, greater< piii > >  tmp;
            
            for(int i=0; i<sz; i++){
                if(pos[i]==W[i].size()-1){
                    tmp.push(piii(W[i][pos[i]], pii('~',i) ));
                }else{
                    tmp.push(piii(W[i][pos[i]], pii(W[i][pos[i]+1], i) ) );
                }
                //tmp.push(pii(W[i][pos[i]], i) );
                pos[i]++;
            }
            
            while(!tmp.empty()){
                piii cur = tmp.top();
                cout<<cur.first<<" is out"<<endl;
                tmp.pop();
                /*
                if(!tmp.empty() && tmp.top().first==cur.first){
                    cout<<"the same for "<<tmp.top().second<<" "<<cur.second<<endl;
                    int idx1 = tmp.top().second;
                    int idx2 = cur.second;
                    if(pos[idx1]<W[idx1].size() && pos[idx2]<W[idx2].size()){
                        if(W[idx1][pos[idx1]] < W[idx2][pos[idx2]]){
                            pii t(cur.first, cur.second);
                            cur = tmp.top();
                            tmp.pop();
                            tmp.push(t);
                        }
                    }
                }*/
                int idx;
                if(cur.first!='.'){
                    ans += cur.first;
                    idx = cur.second.second;
                }
                //cout<<cur.first<<" is out "<<endl;
                if(pos[idx]<W[idx].size()){
                    if(pos[idx]==W[idx].size()-1){
                        tmp.push( piii( W[idx][pos[idx]], pii('~', idx)) ) ;
                    }else{
                        tmp.push( piii( W[idx][pos[idx]], pii(W[idx][pos[idx]+1], idx)) );
                    }
                    pos[idx]++;
                    //tmp.push(pii(W[idx][pos[idx]], idx));
                }
                //print_all(tmp);
            }
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    StringInterspersal *obj;
    string answer;
    obj = new StringInterspersal();
    clock_t startTime = clock();
    answer = obj->minimum(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    string p1;

    {
        // ----- test 0 -----
        //string t0[] = {"DESIGN","ALGORITHM","MARATHON"};
        string t0[] = {"BA","B","BA","B","BA"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "BABABABB";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        string t0[] = {"TOMEK","PETR","ACRUSH","BURUNDUK","KRIJGERTJE"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "ABCKPERIJGERRTJETOMEKTRURUNDUKUSH";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 2 -----
        string t0[] = {"CCCA","CCCB","CCCD","CCCE"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "CCCACCCBCCCCCCDE";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"BKSDSOPTDD","DDODEVNKL","XX","PODEEE","LQQWRT"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "BDDKLODEPODEEEQQSDSOPTDDVNKLWRTXX";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"TOPCODER","BETFAIR","NSA","BT","LILLY"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "BBELILLNSATFAIRTOPCODERTY";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"QITHSQARQV","BYLHVGMLRY","LKMAQTJEAM","AQYICVNIKK","HKGZZFFEWC"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "ABHKGLKMAQIQQTHSQARQTJEAMVYICVNIKKYLHVGMLRYZZFFEWC";
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        string t0[] = {"XHCYBTUQUW","EKBISADSSN","LOOISPOFAK","MIXBDHPJUQ","BNMNDHMOTC"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "BEKBILMINMNDHMOOIOSADSPOFAKSSNTCXBDHPJUQXHCYBTUQUW";
        all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
