#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

const int MAXN = 1002;
const int INF = 999999999;
int g[MAXN][MAXN];


int visited[MAXN];
int cur_best[MAXN];

int prim(int start, int N){
    int sum = 0;
    for(int i=0; i<MAXN; i++){
        cur_best[i] = INF;
        visited[i] = 0;
    }
    cur_best[start] = 0;
    while(1){
        int t_min = INF;
        int pos = -1;
        for(int i=0; i<N; i++){
            if(t_min>cur_best[i] && visited[i]==0){
                t_min = cur_best[i];
                pos = i;
            }
        }
        if(t_min==INF){
            break;
        }else{
            sum+=t_min;
            cout<<"adding "<<t_min<<endl;
            cur_best[pos] = INF;
            visited[pos] = 1;
        }
        
        cout<<"cur pos is "<<pos<<endl;

        for(int i=0; i<N; i++){
            if(visited[i]==0){
                cur_best[i] = min(cur_best[i], g[pos][i]);
            }
        }
        cout<<"after update  best are "<<endl;
        for(int i=0; i<N; i++){
            cout<<cur_best[i]<<" ";
        }cout<<endl;

    }
    return sum;
}


class TimeTravellingSalesman {
    public:
        long long determineCost(int N, vector <string> roads) {
            for(int i=0; i<N; i++)for(int j=0; j<N; j++)g[i][j] = INF;

            string road;
            for(int i=0; i<roads.size(); i++){
                road+=roads[i];
            }

            istringstream istr(road);
            string t;
            int a,b,c;

            while(istr>>t){
                for(int i=0; i<t.size(); i++){
                    if(t[i]==','){
                        t[i] = ' ';
                    }
                }
                istringstream iistr(t);
                iistr>>a;
                iistr>>b;
                iistr>>c;
                g[a][b] = c;
                g[b][a] = c;
            }
            cout<<"ok here"<<endl;
            
            memset(visited,0,sizeof(visited));
            int sz = roads.size();
            int ans = prim(0, N);
            cout<<"prime is "<<ans<<endl;
            for(int i=0; i<N; i++){
                if(visited[i]==false)return -1;
            }
            return ans;

        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, long long p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    TimeTravellingSalesman *obj;
    long long answer;
    obj = new TimeTravellingSalesman();
    clock_t startTime = clock();
    answer = obj->determineCost(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    vector <string> p1;
    long long p2;

    {
        // ----- test 0 -----
        p0 = 3;
        string t1[] = {"0,1,1 0,2,1 1,2,2"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 2ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 6;
        string t1[] = {"0,1,2 1,4,2 4,3,3 2,4,4 0,5,3"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 14ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        string t1[] = {"0,2,2"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = -1ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        string t1[] = {"1,0",",10","0 2,1",",584 3,2",",754"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1438ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
