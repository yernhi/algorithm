#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int INF = 99999999;
const int MAXN = 100001;
int dp[MAXN];

class NumberSplit {
    public:
        vector<int> generator(vector<int> number, int digits){
            vector<int> res;
            for(int i=1; i<(1<<(digits-1)); i++){
                //cout<<"state is "<<i<<endl;
                int s = i;
                vector<int> tmp;
                int cur = number[0];
                for(int j=0; j<digits-1; j++){
                    if( ((s>>j)&1) == 1){
                        tmp.push_back(cur);
                        cur = number[j+1];
                    }else{
                        cur = cur*10 + number[j+1];
                    }
                }
                tmp.push_back(cur);
                //cout<<"ok cur is "<<cur<<endl;
                int t_res = 1;
                //cout<<"numbers in list are "<<endl;
                for(int k=0; k<tmp.size(); k++){
                    t_res *= tmp[k];
                    //cout<<tmp[k]<<"\t";
                }//cout<<endl;
                res.push_back(t_res);
            }
            /*
            for(int i=0; i<res.size(); i++){
                cout<<res[i]<<'\t';
            }cout<<endl;
            */
            return res;
        }
        int dfs(int number){
            if(dp[number]!=-1)return dp[number];
            if(number<10)return 1;
            cout<<"cur "<<number<<endl;
            vector<int> v;
            int digs = 0;
            int t_number = number;
            while(t_number){v.push_back(t_number%10); t_number/=10;digs+=1;}
            reverse(v.begin(), v.end());
            vector<int> sub = generator(v,digs);
            int t_max = 1;
            for(int i=0; i<sub.size(); i++){
                t_max = max(t_max, dfs(sub[i])+1);
            }
            dp[number] = t_max;
            return t_max;
        }
        int longestSequence(int start) {
            memset(dp,-1,sizeof(dp));
            /*
            vector<int> v;
            while(start){
                v.push_back(start%10);start/=10;
            }
            reverse(v.begin(), v.end());
            vector<int> tr = generator(v, v.size());
            */
            int ans = -INF;
            /*for(int i=0; i<tr.size(); i++){
                ans = max(ans, dfs(tr[i]));
            }*/
            ans = dfs(start);
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    NumberSplit *obj;
    int answer;
    obj = new NumberSplit();
    clock_t startTime = clock();
    answer = obj->longestSequence(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    {
        // ----- test 0 -----
        p0 = 6;
        p1 = 1;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 97;
        p1 = 4;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 2 -----
        p0 = 234;
        p1 = 5;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 876;
        p1 = 7;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 4 -----
        p0 = 99999;
        p1 = 29;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
