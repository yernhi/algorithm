#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


int dp[1<<21];
const int INF = 999999999;

const int MAXN = 50;
bool mysp[MAXN][MAXN];




class OrderOfTheHats {
    public:
        int getValue(int state, int sz){
            if(dp[state]!=INF)return dp[state];
            int tmp = INF;
            for(int i=0; i<sz; i++){
                if(((state>>i)&1)==1){
                    int ns = (1<<i)^state;
                    int cnt = 0;
                    for(int k=0; k<sz; k++){
                        if( ((ns>>k)&1)==1  && mysp[k][i] ){
                            cnt++;
                        }
                    }
                    tmp = min(getValue(ns, sz)+cnt, tmp);
                }
            }
            dp[state] = tmp;
            return tmp;
        }
        
        int minChanged(vector <string> spellChart) {
            for(int i=0; i<(1<<21); i++){
                dp[i] = INF;
            }
            int sz = spellChart.size();
            memset(mysp,0,sizeof(mysp));
            dp[0] = 0;
            for(int i=0; i<sz; i++){
                for(int j=0; j<sz; j++){
                    if(spellChart[i][j]=='Y')mysp[i][j] = 1;
                }
            }

            
            int ans = getValue((1<<sz)-1, sz);
            for(int i=0; i<sz; i++){
                if(spellChart[i][i]=='Y')ans++;
            }
            return ans;
        }
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    OrderOfTheHats *obj;
    int answer;
    obj = new OrderOfTheHats();
    clock_t startTime = clock();
    answer = obj->minChanged(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;

    {
        // ----- test 0 -----
        string t0[] = {"Y"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"NYN","NNY","NNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"NYN","NNY","YNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"NYYYYYY","YNYYYYY","YYNYYYY","YYYNYYY","YYYYNYY","YYYYYNY","YYYYYYN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 21;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"NNNY","YNYN","YNNN","YYYN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"YYYYYNNYYYNYNNNNYNNY","NYNNNYYNNYNYYYNYYYYY","NNYNNNYYNNNNNNYYYYNY","YYNYNYYNNYYYNYNNNYYY","NYYNNYNYNYNNNNYYYNYN","NNNNNYYNYNNYYYYNYYYN","YNYNYYNNNYNNNNNYNNYY","NYYYYNYNYNNYNNYNNNNY","YYYYNYYNNYYYNNYNNYNY","YYYYYYNYNYNYNNNNNNYN","NNYYYYYNNNYNNNYNNNNY","YYNNNYNYYNYYNYYNYNYN","NNYNYYNYYNYYNYNYNYYN","YNYNYYNYNNNYNYNYYNYY","NNYNNNYYYYYYYYYYYNYY","YYYYYNYYNYYYYYNNYNNN","NYYYYYYYYNNNNNYYNNYN","YNNYNNNYYNYYYNYNYYYY","YYNNYNYYYNYYNNNYYNNY","NNYNYNYYYNYYNYNNYNNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 79;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        string t0[] = {"YYNYNN","YNYNNY","YYYYNN","NNNYNN","NNNYNN","YNYNYN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 5;
        all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 7 -----
        string t0[] = {"NNNNNNNNNN","NNNNNNNNNN","NNNYNNYNNN","NNNYNNYNNN","NNNYNNYNNN","NNNNNNNNNN","NNYYYYYYNN","NNYNNNNYNN","NNNYYYYNNN","NNNNNNNNNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 6;
        all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
