#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


const int MAXN = 51;
int dp[1<<16];
const int INF = 2000000000;
class SquaresCovering {
    public:
        int minCost(vector <int> x, vector <int> y, vector <int> cost, vector <int> sides) {
            for(int i=0; i<(1<<16); i++){
                dp[i] = INF;
            }
            dp[0] = 0;
            int ns = cost.size();
            int np = x.size();
            for(int j=0; j<(1<<np); j++){
                if(dp[j]==INF)continue;
                //cout<<"cur state "<<j<<endl;
                for(int i=0; i<ns; i++){
                    for(int k=0; k<np; k++){
                        //cout<<"try to cover "<<k<<endl;
                        //left up
                        int s_len = sides[i];
                        int s = j;
                        for(int l=0; l<np; l++){
                            if( x[l] <= x[k] && x[l]>=x[k]-s_len && y[l]<=y[k]+s_len && y[l]>=y[k]){
                                s |= (1<<l);
                            }
                        }
                        //cout<<"left up new state is "<<s<<" new value is "<<dp[j]+cost[i]<<endl;
                        dp[s] = min(dp[s], dp[j]+cost[i]);  
                        //right up
                        s = j;
                        for(int l=0; l<np; l++){
                            if( x[l]<= x[k]+s_len && x[l]>=x[k] && y[l]<=y[k]+s_len && y[l]>=y[k] ){
                                s |= (1<<l);
                            }
                        }
                        //cout<<"right up new state is "<<s<<" new value is "<<dp[j]+cost[i]<<endl;
                        dp[s] = min(dp[s], dp[j]+cost[i]); 
                        s = j;
                        for(int l=0; l<np; l++){
                            if( x[l] <= x[k] && x[l]>= x[k]-s_len && y[l]<=y[k] && y[l]>=y[k]-s_len){
                                s |= (1<<l);
                            }
                        }
                        //cout<<"left down new state is "<<s<<" new value is "<<dp[j]+cost[i]<<endl;
                        dp[s] = min(dp[s], dp[j]+cost[i]);
                        s = j;
                        for(int l=0; l<np; l++){
                            if( x[l]>=x[k] && x[l]<=x[k]+s_len && y[l]>=y[k]-s_len && y[l]<=y[k]){
                                s |= (1<<l);
                            }
                        }
                        //cout<<"down right new state is "<<s<<" new value is "<<dp[j]+cost[i]<<endl;
                        dp[s] = min(dp[s], dp[j]+cost[i]);
                    }
                }
            }
            return dp[(1<<np) - 1];
        
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}";
    cout << "]" << endl;
    SquaresCovering *obj;
    int answer;
    obj = new SquaresCovering();
    clock_t startTime = clock();
    answer = obj->minCost(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p4;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    vector <int> p2;
    vector <int> p3;
    int p4;

    {
        // ----- test 0 -----
        int t0[] = {1,100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,100};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {3,1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {100,1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        int t0[] = {1,100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,100};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {100,1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 1;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    {
        // ----- test 2 -----
        int t0[] = {0,100,201,300};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {0,0,1,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {6,100,10};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1,100,99};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 22;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {41,6334,19169,11478,26962,5705,23281,41};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {18467,26500,15724,29358,24464,28145,16827,18467};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {292,11943,5437,14605,154,12383,18717,19896,21727,11539,19913,26300,9895,23812,30334,4665,7712,6869,27645,32758};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {9962,2996,4828,32392,33,293,17422,19719,5448,14772,1870,25668,17036,28704,31323,17674,15142,28254,25548,32663};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 738;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {41,6334,9169,1478,6962,5705,3281};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {8467,6500,5724,9358,4464,8145,6827};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {92,43,37,15,54,83,17,96,27,39,13,100,95,12,34,65,12,69,45,58};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {962,996,828,392,903,293,422,719,448,772,870,668,36,704,323,674,142,254,548,663};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 84;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
