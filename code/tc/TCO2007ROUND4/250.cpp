#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 60;
const int INF = 999999999;
long long int dp[MAXN][MAXN];



class PolishNotation {
    public:
        bool isNumber(int left, int right, string &expression){
            if(right<left)return false;

            for(int i=left; i<=right; i++){
                if(expression[i]>='0' && expression[i]<='9'){
                    continue;
                }else{
                    return false;
                }
            }
            return true;
        }
        long long int getAnswer(int left, int right, string &expression){
            if(right<left)return -1; 
            if(dp[left][right]!=-1)return dp[left][right];
            cout<<"Testing : "<<expression.substr(left, right-left+1)<<endl; 
            int mid = left+1;
            // [left, mid] [mid+1,right]
            char op = expression[left];
            if(isNumber(left, right, expression)){
                return 1;
            }else{
                if(op!='*' && op!='/' && op!='+' && op!='-'){
                    cout<<"op is "<<op<<endl;
                    return -1;
                }
            }
            bool ok = false;
            long long int sum = 0;
            if(op=='-' && isNumber(left+1, right, expression)){
                ok = true;
                sum = 1;
                //return 1;
            }


            for(int mid=left+1; mid<=right-1; mid++){
                long long int left_ans = getAnswer(left+1, mid, expression);
                long long int right_ans = getAnswer(mid+1, right, expression);
                if(left_ans!=-1 && right_ans!=-1){
                    ok = true;
                    sum+=left_ans * right_ans;
                }
            }


            dp[left][right] = sum;
            return dp[left][right];

        }
        long long waysToDecode(string expression) {
            memset(dp,-1,sizeof(dp));

            long long int ans = getAnswer(0,expression.size()-1, expression);
            if(ans==-1)return 0;
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, long long p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    PolishNotation *obj;
    long long answer;
    obj = new PolishNotation();
    clock_t startTime = clock();
    answer = obj->waysToDecode(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    long long p1;

    {
        // ----- test 0 -----
        p0 = "--------------111111111111111111111111111111111111";
        p1 = 3796297200ll;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "+1234567";
        p1 = 6ll;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "23/33";
        p1 = 0ll;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "/-010";
        p1 = 3ll;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 4 -----
        p0 = "-*123";
        p1 = 1ll;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "--1";
        p1 = 0ll;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
