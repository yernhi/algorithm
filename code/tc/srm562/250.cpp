#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class CucumberMarket {
    public:
        string check(vector <int> price, int budget, int k) {
            int state = 0;
            int sz = price.size();
            bool could_buy = true;
            for(int i=0; i<(1<<sz); i++){
                if(__builtin_popcount(i)==k){
                    int sum = 0;
                    for(int j=0; j<sz; j++){
                        if(((i>>j)&1)==1){
                            sum+=price[j];
                        }
                    }
                    if(sum>budget){
                        could_buy = false;
                    }
                }
            }
            if(could_buy){
                return "YES";
            }else{
                return "NO";
            }

        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, string p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1 << "," << p2;
    cout << "]" << endl;
    CucumberMarket *obj;
    string answer;
    obj = new CucumberMarket();
    clock_t startTime = clock();
    answer = obj->check(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p3 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    int p2;
    string p3;

    {
        // ----- test 0 -----
        int t0[] = {1000,1,10,100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1110;
        p2 = 3;
        p3 = "YES";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {1000,1,10,100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1109;
        p2 = 3;
        p3 = "NO";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {33,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 33;
        p2 = 1;
        p3 = "YES";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1,1,1,1,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 4;
        p3 = "NO";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {1000,1000,1000,1000,1000,1000,1000,1000,1000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 10000;
        p2 = 9;
        p3 = "YES";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
