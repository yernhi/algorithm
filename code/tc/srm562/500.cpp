#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PastingPaintingDivTwo {
    public:
        long long int count_area(vector<string> clipboard, int ux, int uy, int dx, int dy){
            long long int sum = 0;
            for(int i=ux; i<=dx; i++){
                for(int j=uy; j<=dy; j++){
                    if(clipboard[i][j]=='B')sum++;
                }
            }
            return sum;

        }

        long long countColors(vector <string> clipboard, int T) {
            int r_sz = clipboard.size();
            int c_sz = clipboard[0].size();
            cout<<r_sz<<" "<<c_sz<<endl;
            long long int initial_black = count_area(clipboard,0,0,r_sz-1,c_sz-1);

            long long int add_black = 0;
            
            for(int i=0; i<r_sz-1; i++){
                for(int j=0; j<c_sz-1; j++){
                    cout<<i<<" "<<j<<" "<<clipboard[i][j]<<" "<<clipboard[i+1][j+1]<<endl;
                    if(clipboard[i][j]=='B' || clipboard[i+1][j+1]=='B'){
                        add_black+=1;
                    }
                }
            }
            cout<<"at begin add_black"<<add_black<<endl;
            add_black -= count_area(clipboard, 1,1,r_sz-1, c_sz-1);
            //long long int dif_black = count_area(clipboard,1,1, sz-1, sz-1) - count_area(clipboard,0,0,sz-2,sz-2);
            long long int add_each_time = count_area(clipboard,0,c_sz-1,r_sz-2,c_sz-1) + count_area(clipboard,r_sz-1, 0, r_sz-1  ,c_sz-2) ;
            if(clipboard[r_sz-1][c_sz-1]=='B'){
                add_each_time+=1;
            }
            long long int ans = initial_black;
            long long int t = T-1;
            ans += t*add_each_time + add_black*t ;
            cout<<"initial black "<<initial_black<<" add each time "<<add_each_time<<" diff "<<add_black<<endl;
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, long long p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    PastingPaintingDivTwo *obj;
    long long answer;
    obj = new PastingPaintingDivTwo();
    clock_t startTime = clock();
    answer = obj->countColors(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    long long p2;

    {
        // ----- test 0 -----
        string t0[] = {"..B","B..","BB."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = 10ll;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"B...","....","....","...B"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 4ll;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"BBB"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 10000;
        p2 = 30000ll;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1000000000;
        p2 = 0ll;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"BB.",".B."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 100;
        p2 = 201ll;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        string t0[] = {"..........B..........",".........B.B.........","........B...B........",".......B.....B.......","......B..B.B..B......",".....B...B.B...B.....","....B...........B....","...B...B.....B...B...","..B.....BBBBBB....B..",".B..........BB.....B.","BBBBBBBBBBBBBBBBBBBBB"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1000000000;
        p2 = 21000000071ll;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
