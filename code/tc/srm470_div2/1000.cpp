#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 51*51;

typedef pair<int, int> pii;
int N,M;
//vector<pii> g[MAXN];
int g[MAXN][MAXN];
int get_numb(int i, int j){
    return M*i+j;
}

int move[4][2] = {
    {1,0},{-1,0},{0,1},{0,-1}
};

int get_value(vector<string> &grid, int i, int j){
    if(grid[i][j]>='0'&&grid[i][j]<='9'){
        return grid[i][j]-'0';
    }
    if(grid[i][j]>='a' && grid[i][j]<='z'){
        return grid[i][j]-'a'+10;
    }
    if(grid[i][j]>='A' && grid[i][j]<='Z'){
        return grid[i][j]-'A'+36;
    }
}

int get_dif(vector<string> &grid, int i,int j, int x, int y){
    int value_a = get_value(grid, i,j);
    int value_b = get_value(grid, x,y);
    return abs(value_a-value_b);
}

const int INF = 999999999;
int lowcost[MAXN];
int work2(int start){
    for(int i=0; i<M*N; i++){
        lowcost[i] = g[start][i];
        //cout<<"lowcost["<<i<<"] = "<<g[start][i]<<endl;
    }
    int ans = 0;
    for(int i=0; i<M*N-1; i++){
        int t_min = INF;
        int t_num = -1;
        for(int j=0; j<M*N; j++){
            if(lowcost[j]!=-INF && t_min>lowcost[j]){
                t_min = lowcost[j];
                t_num = j;
            }
        }
        //cout<<"next is "<<t_num<<" low-value is "<<lowcost[t_num]<<endl;
        //cout<<"now lowcost is ";
        ans+=lowcost[t_num];
        lowcost[t_num] = -INF;
        /*
        for(int i=0; i<M*N; i++){
            cout<<lowcost[i]<<" ";
        }cout<<endl;
*/
        for(int j=0; j<M*N; j++){
            if(lowcost[j]!=-INF && g[j][t_num] < lowcost[j]){
                lowcost[j] = g[j][t_num];
            }
        }
    }
    return ans;
}

class ActivateGame {
    public:
        int findMaxScore(vector <string> grid) {
            N = grid.size();
            M = grid[0].size();
            for(int i=0; i<MAXN; i++){
                for(int j=0; j<MAXN; j++){
                    g[i][j] = INF;
                }
                g[i][i] = -INF;
            }

            for(int i=0; i<grid.size() ;i++){
                for(int j=0; j<grid[0].size(); j++){
                    int cur_num = get_numb(i,j);
                    for(int k=0; k<4; k++){
                        int x = move[k][0]+i;
                        int y = move[k][1]+j;
                        if(x>=0 && x<N && y>=0 && y<M){
                            int adj = get_numb(x,y);
                            int dif = get_dif(grid, i,j, x,y);
                            dif = -dif;
                            //g[cur_num].push_back( pii(dif, adj) );
                            //g[adj].push_back(pii( dif, cur_num) );
                            g[cur_num][adj] = dif;
                            g[adj][cur_num] = dif;
                            //cout<<"actuall "<<i<<" "<<j<<" to "<<x<<" "<<y<<endl;
                            //cout<<"adding "<<cur_num<<" to "<<adj<<" dif "<<dif<<endl;
                        }
                    }
                }
            }
            int ans = work2(0);
            return -ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    ActivateGame *obj;
    int answer;
    obj = new ActivateGame();
    clock_t startTime = clock();
    answer = obj->findMaxScore(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;

    {
        // ----- test 0 -----
        string t0[] = {"abcdefghij", "klmnopqrst", "uvwxyzzzzz", "ABCDEFGHIJ", "KLMNOPQRST", "UVWXYZZZZZ", "0123456789"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1009;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"03","21"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 7;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 2 -----
        string t0[] = {"John","Brus","Gogo"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 118;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"AAA","AAA","AAA"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
