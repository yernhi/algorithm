#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
const int MAXN = 55;
const int INF = 99999999;
int dp[MAXN];

class CuttingBitString {
public:
    
    int getmin(string S) {
        set<long long> pp;
        long long tmp = 1;
        for(int i=0; i<35; i++){
            if(tmp<=0)break;
            pp.insert(tmp);
            tmp*=5;
        }

        int sz = S.size();
        for(int i=0; i<=sz; i++)dp[i] = INF;
        
        dp[0] = 0;
        
        for(int i=0; i<sz; i++){
            if(dp[i]!=INF && S[i] =='1'){
                long long num = 0;
                for(int j=i; j<sz; j++){
                    num = num*2 + S[j]-'0';
                    if(pp.count(num)>=1){
                        cout<<"dp["<<j+1<<"] = "<<dp[j+1]<<" "<<dp[i] + 1<<endl;
                        dp[j+1] = min(dp[j+1], dp[i]+1);
                    }
                }
            }
        }
        if(dp[sz]==INF)return -1;
        return dp[sz];
    }
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    CuttingBitString *obj;
    int answer;
    obj = new CuttingBitString();
    clock_t startTime = clock();
    answer = obj->getmin(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    string p0;
    int p1;
    {
    // ----- test 0 -----
    p0 = "101101101";
    p1 = 3;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
    }
    {
    // ----- test 1 -----
    p0 = "1111101";
    p1 = 1;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
    }
    {
    // ----- test 2 -----
    p0 = "00000";
    p1 = -1;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    p0 = "110011011";
    p1 = 3;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    p0 = "1000101011";
    p1 = -1;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 5 -----
    p0 = "111011100110101100101110111";
    p1 = 5;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
