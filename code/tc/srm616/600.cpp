#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int tmp[100];
int idx = 0;
class ColorfulCoinsEasy {
public:
    string isPossible(vector <int> values) {
        int sz = values.size();

        int upper = ((sz)*sz)*2*20000;
        for(int i=1; i<=upper; i++){
            int cur = i;
            idx = 0;
            for(int j=sz-1; j>=0; j--){
                if( values[j] > cur)break;
                int c = (cur-cur%values[j])/values[j];
                tmp[idx++] = c;
                //tmp.push_back(c);
                cur -= c*values[j];
            }
            int t_size = idx;
            if(t_size!=sz)continue;
            sort(tmp, tmp+idx);
            bool bad=false;
            for(int a=0; a<t_size-1; a++){
                if(tmp[a] == tmp[a+1]){
                    bad=true;
                    break;
                }
            }
            if(bad==false && t_size==sz){
                return "Possible";
            }
        }
        return "Impossible";
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    ColorfulCoinsEasy *obj;
    string answer;
    obj = new ColorfulCoinsEasy();
    clock_t startTime = clock();
    answer = obj->isPossible(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    vector <int> p0;
    string p1;
    
    {
    // ----- test 0 -----
    int t0[] = {1};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "Possible";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 1 -----
    int t0[] = {1,3};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "Possible";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    int t0[] = {1, 8, 40, 80, 240,  480};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "Impossible";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    int t0[] = {1,5,15,90};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "Possible";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    int t0[] = {1,4,20,60,180,1440,5760};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "Impossible";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 5 -----
    int t0[] = {1,7,21,105,630,3150,18900};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "Possible";
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 6 -----
    int t0[] = {1,10,30,300,900,9000,18000};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "Impossible";
    all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 7 -----
    int t0[] = {1,2,10,40,200,1000,4000,20000};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = "Impossible";
    all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
    // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
