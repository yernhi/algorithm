#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LeftRightDigitsGame {
    public:
        char firstNotZero(string ans){
            for(int i=0; i<ans.size(); i++){
                if(ans[i]!='0')return ans[i];
            }
            return '#';
        }

        string minNumber(string digits) {
            
            string ans = "";
            int sz = digits.size();
            
            ans += digits[0];

            bool ok = false;
            for(int i=1; i<sz; i++){
                if(digits[i]=='0'){
                    ok = false;
                    for(int j=i+1; j<sz; j++){
                        if(digits[j]>'0'){
                            ok = true;
                            cout<<"after "<<i<<" ok at "<<digits[j]<<endl;
                            break;
                        }
                    }
                    if(ok){
                        ans = "0"+ans;
                    }else{
                        ans += "0";
                    }
                }else{
                    if(ans[0]=='0'){
                        ok = false;
                        for(int j=i+1; j<sz; j++){
                            if(digits[j]<=digits[i]){
                                ok = true;
                                break;
                            }
                        }
                        if(ok){
                            ans+=digits[i]; 
                        }else{
                            ans = digits[i]+ans;
                        }
                    }else{
                        if(digits[i]>ans[0]){
                            ans += digits[i];
                        }else{
                            ans = digits[i]+ans;
                        }
                    }
                }

            }
            
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    LeftRightDigitsGame *obj;
    string answer;
    obj = new LeftRightDigitsGame();
    clock_t startTime = clock();
    answer = obj->minNumber(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = "565";
        p1 = "556";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "9876543210";
        p1 = "1234567890";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "8016352";
        p1 = "1086352";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
