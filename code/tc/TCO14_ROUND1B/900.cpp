#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 100;
double dp[MAXN][MAXN];

int n_child[MAXN];

vector<int> tree[MAXN];

double all = 0.0;
void dfs(int par, int node, int step, int depth){
    if(depth > step)return ;
    
    //int n_c = n_child[node];
    int n_c = tree[node].size();
    cout<<"step = "<<step<<" at node "<<node<<" n_c = "<<n_c<<endl;
    double p = (dp[node][step-1]) * dp[node][step];
    //+ dp[node][step];
    cout<<"pre p = "<<p<<endl;
     
    for(int i=0; i<tree[node].size(); i++){
        cout<<"child = "<<tree[node][i]<<" "<<p/n_c<<endl;
        dp[tree[node][i]][step] = p/n_c;
        dfs(node, tree[node][i], step, depth + 1);
    }
}

class EagleInZoo {
    public:
        double calc(vector <int> parent, int K) {
            memset(n_child, 0, sizeof(n_child));
            for(int i=0; i<MAXN; i++){
                tree[i].clear();
                for(int j=0; j<MAXN; j++){
                    dp[i][j] = 0.0;
                }
            }
            dp[0][1] = 1.0;

            for(int i=0; i<parent.size(); i++){
                n_child[parent[i]] += 1;
                tree[parent[i]].push_back(i+1);
            }
            
            for(int k=2; k<=K; k++){
                dp[0][k] = 1.0;
                all = 1.0;
                dfs(-1, 0, k, 1);
            }

            double ans = 0.0;
            for(int i=1; i<=parent.size(); i++){
                ans += dp[i][K];
            }
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, double p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    EagleInZoo *obj;
    double answer;
    obj = new EagleInZoo();
    clock_t startTime = clock();
    answer = obj->calc(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    double p2;

    {
        // ----- test 0 -----
        int t0[] = {0,0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 1.0;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {0,0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = 0.5;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {0,1,0,3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        p2 = 0.75;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    return 0;
    {
        // ----- test 3 -----
        int t0[] = {0,0,1,1,2,4,4,4,5,5,6,6};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 20;
        p2 = 0.14595168754091617;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {0,1,2,3,2,1,1,7,0,9,10,11,12,13,14,15,16,17,18,14,9};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 24;
        p2 = 0.3272154791654077;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {0,1,2,3,4,5,6,7,8,9,10};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 50;
        p2 = 0.0;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
