#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 10000;
const int MAXM = 500;
double p[MAXN][MAXM];


class RedPaint {
    public:
        double expectedCells(int N) {
            for(int i=0; i<MAXN; i++){
                for(int j=0; j<MAXM; j++){
                    p[i][j] = 0.0;
                }
            }
            int middle = 5000;
            p[middle][0] = 1.0;

            double ans = 1.0;
            for(int step=1; step<=N; step++){
                for(int i=0; i<MAXN; i++){
                    if(i+1<MAXN){
                        p[i][step] += p[i+1][step-1]*0.5*(step+1);
                    }
                    if(i-1>=0){
                        p[i][step] += p[i-1][step-1]*0.5*(step+1);
                    }
                    
                }
            }
            for(int i=0; i<MAXN; i++){
                if(p[i][N]>0){
                    cout<<p[i][N]<<endl;
                }
            }

            return ans;
        }
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, double p1) {
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    RedPaint *obj;
    double answer;
    obj = new RedPaint();
    clock_t startTime = clock();
    answer = obj->expectedCells(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    double p1;

    {
        // ----- test 0 -----
        p0 = 0;
        p1 = 1.0;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 1;
        p1 = 2.0;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 2;
        p1 = 2.5;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        p1 = 3.375;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
