#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef pair<int, int> pii;
class ColorfulChocolates {
    public:
        int maximumSpread(string chocolates, int maxSwaps) {
            int sz = chocolates.size();
            int ans = 0;
            for(int i=0; i<sz; i++){
                int steps = 0;
                vector< pii > v;
                for(int j=0; j<sz; j++){
                    if(chocolates[j]==chocolates[i] && i!=j){
                        v.push_back(pii(abs(i-j),j)); 
                    }
                }
                sort(v.begin(), v.end());
                int front=1, rear =1, t_cnt=0;
                for(int j=0; j<v.size(); j++){
                    if(v[j].second>i){
                        steps += v[j].second - (front+i);
                        front++;
                    }else if(v[j].second<i){
                        steps += i-rear - v[j].second;
                        rear++;
                    }
                    if(steps<=maxSwaps){
                        t_cnt++;
                        ans = max(ans,t_cnt);
                    }else{
                        break;
                    }
                }
            }
            return ans+1;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
    cout << "]" << endl;
    ColorfulChocolates *obj;
    int answer;
    obj = new ColorfulChocolates();
    clock_t startTime = clock();
    answer = obj->maximumSpread(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    int p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = "ABCDCBC";
        p1 = 1;
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        p0 = "ABCDCBC";
        p1 = 2;
        p2 = 3;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "ABBABABBA";
        p1 = 3;
        p2 = 4;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "ABBABABBA";
        p1 = 4;
        p2 = 5;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "QASOKZNHWNFODOQNHGQKGLIHTPJUVGKLHFZTGPDCEKSJYIWFOO";
        p1 = 77;
        p2 = 5;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
