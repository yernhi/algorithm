#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 51;
double dp[MAXN][MAXN];
const double INF = 999999999;

class MinimumVariancePartition {
    public:
        double get_dev(int left, int right, vector <int> &mix){
            int sum = 0;
            for(int i=left; i<=right; i++){
                sum+=mix[i];
            }
            double mean = sum*1.0/(right-left+1);
            double var = 0.0;
            for(int i=left; i<=right; i++){
                var += (mix[i]-mean)*(mix[i]-mean);
            }
            return var*1.0/(right-left+1);
        }

        
        double minDev(vector <int> mixedSamples, int k) {
            sort(mixedSamples.begin(), mixedSamples.end());
            for(int i=0; i<mixedSamples.size(); i++){
                cout<<mixedSamples[i]<<" ";
            }cout<<endl;

            for(int i=0; i<MAXN; i++){for(int j=0; j<MAXN; j++)dp[i][j]=INF;};
            dp[0][0] = 0.0;
            int sz = mixedSamples.size();
            for(int i=0; i<=k-1; i++){
                for(int j=i; j<sz; j++){
                    if(i==k-1){
                        dp[i+1][sz-1] = min(dp[i+1][sz-1], dp[i][j]+get_dev(j,sz-1,mixedSamples) );
                        cout<<"ok "<<i+1<<" "<<sz-1<<" "<<dp[i+1][sz-1]<<endl;
                        cout<<"i j are "<<i<<" "<<j<<" "<<dp[i][j]<<endl;
                    }
                    else{
                        for(int m=j+1; m<=sz-(k-1-i); m++){
                            dp[i+1][m] = min(dp[i+1][m], dp[i][j] + get_dev(j,m-1, mixedSamples));
                            cout<<"("<<j<<","<<m-1<<") "<<get_dev(j,m-1,mixedSamples)<<endl;
                        }
                    }
                }
            }
            double ans = INF;
            for(int i=0; i<MAXN; i++){
                ans = min(ans, dp[k][i]);
            }
            return ans;

        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, double p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    MinimumVariancePartition *obj;
    double answer;
    obj = new MinimumVariancePartition();
    clock_t startTime = clock();
    answer = obj->minDev(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    double p2;

    {
        // ----- test 0 -----
        int t0[] = {3,4,7,10};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        p2 = 7.5;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        int t0[] = {1000,500,1,500};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = 0.0;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 2 -----
        int t0[] = {54,653,876,2,75};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 5;
        p2 = 0.0;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        int t0[] = {42,234,10,1,123,545,436,453,74,85,34,999};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 5;
        p2 = 1700.7397959183672;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {923,456,12,12,542,234,11,12,10,9};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        p2 = 1850.3333333333333;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
