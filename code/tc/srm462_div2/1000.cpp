#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


const int MAXN = 100;
const int INF = 999999999;
int g[MAXN][MAXN];

class SteeplechaseTrack {
    public:
        int maxComplexity(vector <string> fences, vector <string> tracks, int N) {
            int init[MAXN];
            int sz = fences.size();
            cout<<"size is "<<sz<<endl;
            for(int i=0; i<sz; i++){
                int t = fences[i][1]-'0';
                if(t==0){
                    init[i] = -INF;
                }else{
                    init[i] = t;
                }
                if(init[i]!=-INF){
                    init[i] += fences[i][0]-'0'; 
                }
            }

            cout<<"initial "<<endl;
            for(int i=0; i<sz; i++){
                cout<<init[i]<<" ";
            }cout<<endl;

            int ans = -INF;
            for(int iter=0; iter<N-1; iter++){
                cout<<"initial at iter "<<iter<<endl;
                for(int k=0; k<sz; k++){
                    cout<<init[k]<<" ";
                }cout<<endl;
                int tmp_state[MAXN];
                for(int i=0; i<sz; i++){
                    tmp_state[i] = init[i];
                }
                for(int i=0; i<sz; i++){   // to i
                    int tmp = -INF;
                    for(int j=0; j<sz; j++){
                        if(tmp_state[j]!=-INF){
                            if(tracks[j][i]!='0'){
                                tmp = max(tmp, init[j]+ tracks[j][i]-'0'+fences[i][0]-'0');
                            }
                        }
                    }
                    if(tmp!=-INF){
                        tmp_state[i] = tmp;
                    }
                }
                for(int i=0; i<sz; i++){
                    init[i] = tmp_state[i];
                }
            }
            for(int i=0; i<sz; i++){
                if(init[i]!=-INF && fences[i][2]!='0'){
                    init[i] += fences[i][2]-'0';
                }
                ans = max(init[i], ans);
            }
            cout<<"final"<<endl;
            for(int k=0; k<sz; k++){
                cout<<init[k]<<" ";
            }cout<<endl;
            if(ans==-INF){
                return -1;
            }
            return ans;
        }
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, int p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}" << "," << p2;
    cout << "]" << endl;
    SteeplechaseTrack *obj;
    int answer;
    obj = new SteeplechaseTrack();
    clock_t startTime = clock();
    answer = obj->maxComplexity(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <string> p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        string t0[] = {"310","300","301"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"010","001","000"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 4;
        p3 = 13;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        string t0[] = {"923"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"1"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 100;
        p3 = 1004;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"111","222","333"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"743","985","380"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1;
        p3 = 9;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        string t0[] = {"101","202","303"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"659","431","770"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 5;
        p3 = -1;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"693","982","236"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"603","986","780"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 10;
        p3 = 172;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING

