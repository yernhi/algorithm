#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 65;
const int INF = 999999999;
int dp[MAXN][MAXN][MAXN];
int dir[2] = {1,-1};
//int tele_from_to[MAXN];
vector<int> tele_from_to[MAXN];

class CheapestRoute {
    public:
        vector <int> routePrice(vector <int> cellPrice, vector <int> enterCell, vector <int> exitCell, int teleportPrice) {
            for(int i=0; i<MAXN; i++)tele_from_to[i].clear();

            for(int i=0; i<exitCell.size(); i++){
                tele_from_to[enterCell[i]].push_back(exitCell[i]);
            }

            for(int i=0; i<MAXN; i++)for(int j=0; j<MAXN; j++)for(int k=0; k<MAXN; k++)dp[i][j][k] = INF;
            dp[0][0][0] = 0;
            int n_cell = cellPrice.size();
            int ans1 = INF;
            int ans2 = INF;
            for(int i=0; i<n_cell; i++){
                for(int j=0; j<n_cell; j++){
                    for(int k=0; k<n_cell; k++){
                        if(dp[i][j][k]!=INF){
                            //to left or right
                            for(int d=0; d<2; d++){
                                int to = j+dir[d];
                                if(to>=0 && to<n_cell && cellPrice[to]!=-1){
                                    dp[i+1][to][k] = min(dp[i][j][k]+cellPrice[to], dp[i+1][to][k]);
                                }
                            }
                            //tele
                            for(int d=0; d<tele_from_to[j].size(); d++){
                                //if( tele_from_to[j][d]!=-1 ){
                                    int to = tele_from_to[j][d];
                                    if( cellPrice[to]!=-1){
                                        dp[i+1][to][k+1] = min(dp[i][j][k]+teleportPrice+k, dp[i+1][to][k+1]);
                                    }
                                //}
                            }
                        }
                        if(j==n_cell-1 && dp[i][j][k]!=INF){
                            if(ans1>dp[i][j][k]){
                                ans1 = dp[i][j][k];
                                ans2 = i;
                            }

                        }
                    }
                }
            }
            vector<int> final_ans;
            if(ans1==INF){
                return final_ans;
            }else{
                final_ans.push_back(ans1);
                final_ans.push_back(ans2);
            }
            return final_ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, int p3, bool hasAnswer, vector <int> p4) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << p3;
    cout << "]" << endl;
    CheapestRoute *obj;
    vector <int> answer;
    obj = new CheapestRoute();
    clock_t startTime = clock();
    answer = obj->routePrice(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p4.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p4[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p4.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p4[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    vector <int> p2;
    int p3;
    vector <int> p4;

    {
        // ----- test 4 -----
        //int t0[] = {4,2,1,0,5,6,0,3,0};
        int t0[] = {78, 17, 16, 91, 22, 94, 19};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {4, 1, 3, 0, 3, 3, 2, 2, 0, 2, 3, 5, 6, 0, 0, 3, 5, 3, 0, 2, 5, 5, 1, 3, 4};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1, 4, 6, 4, 1, 4, 4, 6, 1, 5, 1, 6, 5, 2, 0, 0, 1, 1, 2, 2, 2, 6, 2, 1, 5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int p3 = 0;
        int t4[] = {1,2};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }


    {
        // ----- test 0 -----
        int t0[] = {31, 60, 24};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1, 0, 0, 2, 2, 2, 2, 1, 2, 0, 2, 2, 0, 1, 1, 2, 2, 0, 2, 1, 1, 0, 0, 1, 2, 0, 2, 0, 1, 2, 2, 1, 0, 2, 1, 0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {2, 0, 0, 0, 0, 1, 1, 0, 2, 1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 2, 0, 0, 0, 1, 2, 1, 1, 2, 2, 0, 2, 2, 0, 0, 2, 1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 256;
        int t4[] = {84,2};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        int t0[] = {32, 12, 88, 4, 27, 98, 69, 6};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] =  {0, 6, 3, 3, 6, 4, 0, 0, 2, 2, 4, 5, 6, 0, 5, 3, 3, 3, 2, 4, 4, 3, 0, 5, 3, 3, 2, 1, 3, 0, 1, 1, 7, 5, 5, 3, 1, 6, 2, 1, 5, 4, 7, 4, 6};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1, 3, 0, 1, 4, 0, 1, 1, 7, 4, 6, 3, 7, 6, 6, 3, 4, 6, 0, 6, 2, 0, 7, 2, 6, 3, 6, 2, 5, 5, 0, 7, 2, 1, 3, 4, 6, 3, 6, 0, 5, 3, 0, 1, 6};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 24;
        int t4[] = {24,1};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    return 0;
    {
        // ----- test 2 -----
        int t0[] = {1,2,3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1.clear() /*{}*/;
        p2.clear() /*{}*/;
        p3 = 100;
        int t4[] = {5,2};
        p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1,0,-1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0;
        p4.clear() /*{}*/;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }


    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
