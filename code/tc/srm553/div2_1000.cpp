#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 51;
const int INF = 99999999;
bool dp[MAXN][10001*MAXN];

int ans, sz;

class SafeRemoval {
    public:
        void get_ans(int cur, int cur_sum, int k, vector<int> &seq, string trace){
            cout<<"cur = "<<cur_sum<<" with k = "<<k<<" trace = "<<trace<<endl;
            if(k==0){
                ans = max(ans, cur_sum);
                return  ;
            }
            if(cur>=sz)return ;
            //take cur
            int next_sum = cur_sum - seq[cur];
            if(next_sum%4!=0){
                get_ans(cur+1, next_sum, k-1, seq, trace+"1");
            }
            get_ans(cur+1, cur_sum, k, seq, trace+"0");
        }


        int removeThem(vector <int> seq, int k) {

            sort(seq.begin(), seq.end());
            ans = -INF;
            sz = seq.size();
            int t_sum=0;
            for(int i=0; i<seq.size(); i++)t_sum+=seq[i];
            get_ans(0, t_sum, k, seq, ""); 
            return ans; 
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    SafeRemoval *obj;
    int answer;
    obj = new SafeRemoval();
    clock_t startTime = clock();
    answer = obj->removeThem(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;
    int p2;

    {
        // ----- test 0 -----
        int t0[] = {3,8,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        p2 = 11;
        //all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        int t0[] = {1,1,1,1,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = -1;
        //all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {1,6,1,10,1,2,7,11};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 6;
        p2 = 21;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }
return 0;
    {
        // ----- test 3 -----
        int t0[] = {1,1,1,1,1,1,1,1,7};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = 6;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
