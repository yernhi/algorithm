#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;



stack<long long> S;
class Suminator {
public:
    
    long long get_next(){
        if(S.size()==0){
            return 0;
        }
        long long tmp = S.top();
        S.pop();
        return tmp;
    }

    
    long long a, b;
    int work(vector<int> program, int wantedResult){
        for(int i=0; i<sz; i++){
            if(program[i] == -1){
                S.push(-1);
            }else if(program[i]==0){
                a = get_next();
                b = get_next();
                if(a==-1 || b==-1){
                    S.push(-1);
                }else if(a!=-1 && b!=-1){
                    S.push(i);
                }
            } else{
                S.push(i);
            }
        }
        if(S.top() == -1){
            return -1;
        }
        return 1;
    }

    int findMissing(vector <int> program, int wantedResult) {
        int sz = program.size();

        int pos = -1;
        for(int i=0; i<sz; i++)if(program[i] == -1)pos = i;

        int indicator = work(program, wantedResult);
        if(indicator == -1){


        }

        int indicator = S.top();

        bool functional_zero = false;

        S = stack<long long>();
        for(int i=0; i<sz; i++){
            if(program[i] == -1 || program[i]==0){
                a = get_next();b = get_next();
                S.push(a+b);
            }else{
                S.push(program[i]);
            }
        }
        
        if(wantedResult - S.top() == 0){
            functional_zero = true;
        }

        S = stack<long long>();
        for(int i=0; i<sz; i++){
            if(program[i] == -1){
                S.push(0);
            }else if(program[i] == 0){
                a = get_next();b = get_next();
                S.push(a+b);
            }else{
                S.push(program[i]);
            }
        }


        int need = wantedResult - S.top();
        cout<<"indicator = "<<indicator<<endl;
        cout<<wantedResult<<" "<<S.top();

        if(functional_zero){
            return 0;
        }
        else if(indicator==-1){
            return need;
        }else{
            if(S.top()==0){
                return 0;
            }else{
                return -1;
            }
        }
        
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    Suminator *obj;
    int answer;
    obj = new Suminator();
    clock_t startTime = clock();
    answer = obj->findMissing(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    vector <int> p0;
    int p1;
    int p2;
    
    {
    // ----- test 0 -----
    int t0[] = {7,-1,0};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 10;
    p2 = 3;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 1 -----
    int t0[] = {100,200,300,0,100,-1};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 600;
    p2 = 0;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    int t0[] = {-1,7,3,0,1,2,0,0};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 13;
    p2 = 0;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    int t0[] = {-1,8,4,0,1,2,0,0};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 16;
    p2 = -1;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    int t0[] = {1000000000,1000000000,1000000000,1000000000,-1,0,0,0,0};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1000000000;
    p2 = -1;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 5 -----
    int t0[] = {7,-1,3,0};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 3;
    p2 = -1;
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
