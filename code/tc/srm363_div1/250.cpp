#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
const int MAXN = 51;
long long int dp[MAXN][MAXN];

class HandsShaking {
    public:
        long long int getAnswer(int left, int right){
            if(dp[left][right]!=-1)return dp[left][right];
            if(abs(left-right)==1)return 1;
            long long int sum = 0;
            for(int mid = left+1; mid<=right; mid++){
                long long int ans_left = getAnswer(left+1, mid-1);
                long long int ans_right = getAnswer(mid+1, right);
                sum += ans_left * ans_right;
            }
            dp[left][right] = sum;
            return sum;
        }

        long long countPerfect(int n) {
            memset(dp,-1,sizeof(dp));
            return getAnswer(0, n-1);


        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, long long p1) {
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    HandsShaking *obj;
    long long answer;
    obj = new HandsShaking();
    clock_t startTime = clock();
    answer = obj->countPerfect(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    long long p1;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 1ll;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 4;
        p1 = 2ll;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 8;
        p1 = 14ll;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
