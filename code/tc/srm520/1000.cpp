#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 51;

long long int dp[MAXN][4][4][4];
int nums[MAXN];
int MOD = 1000000007;


int count_not_zero(int a, int b, int c){
    int t = 0;
    if(a>0)
        t++;
    if(b>0)t++;
    if(c>0)t++;
    return t;
}
int count_n(int a, int b, int c, int n){
    int t=0;
    if(a==n)t++;
    if(b==n)t++;
    if(c==n)t++;
    return t;
}

int count_Y(int a, int b, int c){
    int t=0;
    if(a<3)t++;
    if(b<3)t++;
    if(c<3)t++;
    return t;
}


class SRMSystemTestPhase {
    public:
        int countWays(vector <string> description) {
            memset(dp,0,sizeof(dp));
            int sz = description.size();
            

            description.push_back("YYY"); 
            for(int i=0; i<sz; i++){
                int t_cnt = 0;
                for(int j=0; j<3; j++){
                    if(description[i][j]=='Y')t_cnt++;
                }
                nums[i] = t_cnt;
            }
            cout<<nums[sz-1]<<endl; 
            for(int i=0; i<=3; i++){
                for(int j=0; j<=3; j++){
                    for(int k=0; k<=3; k++){
                        if(nums[sz-1] !=count_Y(i,j,k) ||  (description[sz-1][0]=='N'&&i!=3) ||(description[sz-1][1]=='N'&&j!=3) || (description[sz-1][2]=='N'&&k!=3) ){
                            continue;
                        }
                        dp[sz-1][i][j][k] = 1;
                    }
                }
            }
            
            int ha_count = 0;
            for(int row=sz-2; row>=0; row--){
                cout<<"at row "<<row<<endl;
                for(int i=0; i<=3; i++){
                    for(int j=0; j<=3; j++){
                        for(int k=0; k<=3; k++){
                            if((description[row][0]=='N' && i!=3) || (description[row][1]=='N'&&j!=3) || (description[row][2]=='N'&&k!=3))continue; 
                            if(count_Y(i,j,k)!= nums[row])continue;
                            cout<<"a ha "<<i<<" "<<j<<" "<<k<<endl;
                            for(int a=0; a<=3; a++){
                                for(int b=0; b<=3; b++){
                                    for(int c=0; c<=3; c++){
                                        if(count_Y(a,b,c)!=nums[row+1])continue;
                                        if((description[row+1][0]=='N' && a!=3) || (description[row+1][1]=='N'&&b!=3) || (description[row+1][2]=='N'&&c!=3))continue; 
                                        int pass_cur = count_n(i,j,k,0);
                                        int pass_pre = count_n(a,b,c,0);
                                        if(pass_cur > pass_pre || (pass_cur==pass_pre && count_n(i,j,k,1)<=count_n(a,b,c,1)) ){
                                            if(dp[row+1][a][b][c]!=0){
                                                cout<<"pass are ("<<pass_cur<<" "<<pass_pre<<")"<<endl;
                                                cout<<"cha "<<count_n(i,j,k,1)<<" "<<count_n(a,b,c,1)<<endl;
                                                cout<<"ok "<<i<<" "<<j<<" "<<k<<" - "<<a<<" "<<b<<" "<<c<<"-"<<dp[row+1][a][b][c]<<endl;
                                            }
                                            dp[row][i][j][k] += dp[row+1][a][b][c];
                                            dp[row][i][j][k]%=MOD;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            long long int ans = 0;
            for(int i=0; i<=3; i++){
                for(int j=0; j<=3; j++){
                    for(int k=0; k<=3; k++){
                        ans+=dp[0][i][j][k];
                        ans%=MOD;
                    }
                }
            }
            return ans%MOD;
        }

};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    SRMSystemTestPhase *obj;
    int answer;
    obj = new SRMSystemTestPhase();
    clock_t startTime = clock();
    answer = obj->countWays(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;

    {
        // ----- test 0 -----
        string t0[] = {"YYY"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 27;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        string t0[] = {"YNN","NYN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 6;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 2 -----
        string t0[] = {"YNN","NNN","NNY"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"NNN","NNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"YYY","YNY","NYY","YYN","YYY","YNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 15176;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
