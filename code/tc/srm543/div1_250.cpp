#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


typedef long long  ll;

long long pow_of_2(int x){
    long long ans = 1;
    for(int i=0; i<x; i++){
        ans *= 2;
    }
    return ans;
}

ll get_pos(int pos, ll number){
    ll tmp = pow_of_2(pos);
    if(number < tmp )return 0;
    ll regions = (number ) / tmp;
    ll ones;
    if(regions%2 == 1){
        //cout<<"ha "<<number%tmp<<" "<<tmp*(regions/2)<<endl;
        ones = ((number)%tmp+1) + tmp*((regions)/2);
    }else{
        ones = (regions/2)*tmp;
    }
    
    cout<<number<<" "<<regions<<" "<<tmp<<" "<<ones<<endl;

    return ones;
}

int get_digits(ll R){
    int cnt = 0;
    while(R){
        R>>=1;
        cnt += 1;
    }
    return cnt;
}


class EllysXors {
public:
    long long getXor(long long L, long long R) {
        
        cout<<"digits = "<<get_digits(R)<<endl;
        ll ans = 0L;

        for(ll i=0; i<get_digits(R); i++){
            //cout<<i<<" "<<get_pos(i, R) <<" "<<get_pos(i, L-1)<<endl;
            ll tmp = get_pos(i, R) - get_pos(i, L-1);
            if(tmp%2==1){
                //ans |= pow_of_2(i);
                ans |= 1L<<i;
                cout<<"now ans = "<<ans<<endl;
            }
        }
        return ans;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1;
    cout << "]" << endl;
    EllysXors *obj;
    long long answer;
    obj = new EllysXors();
    clock_t startTime = clock();
    answer = obj->getXor(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    long long p0;
    long long p1;
    long long p2;
    
    {
    // ----- test 0 -----
    p0 = 1ll;
    p1 = 4000000000ll;
    p2 = 4000000000;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 1 -----
    p0 = 2ll;
    p1 = 4ll;
    p2 = 5ll;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    p0 = 1ll;
    p1 = 4ll;
    p2 = 4ll;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    p0 = 666ll;
    p1 = 1337ll;
    p2 = 0ll;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    p0 = 1234567ll;
    p1 = 89101112ll;
    p2 = 89998783ll;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
