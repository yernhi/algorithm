#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 256;
const int INF = 99999999;


int g[MAXN][MAXN];
int kind[MAXN];
int char_cnts;

class TopView {
    public:
        string top_sort(){
            int cnt=0;
            string ans = "";
            while(char_cnts--){
                bool ok = false;
                int cur = -1;
                for(int i=0; i<MAXN; i++){
                    if(kind[i]==0){
                        continue;
                    }
                    bool no_edge_in = true;
                    for(int j=0; j<MAXN; j++){
                        if(g[j][i]!=INF){
                            no_edge_in = false;break;
                        }
                    }
                    if(no_edge_in){
                        cur = i;
                        cnt++;
                        ok = true;
                        break;
                    }
                }
                if(ok==false){
                    return "ERROR!";
                }
                ans+=char(cur);;
                kind[cur] = 0;
                for(int i=0; i<MAXN; i++){
                    g[cur][i] = INF;
                }
            }
            return ans;
        }


        string findOrder(vector <string> grid) {
            char_cnts = 0;
            memset(kind,0,sizeof(kind));
            for(int i=0; i<MAXN; i++){
                for(int j=0; j<MAXN; j++){
                    g[i][j] = INF;
                }
            }

            for(int i=0; i<grid.size(); i++){
                for(int j=0; j<grid[0].size(); j++){
                    if(grid[i][j]!='.'){
                        kind[ int(grid[i][j]) ]  = 1;
                    }
                }
            }
            for(int k=MAXN-1; k>=0; k--){
                if(kind[k]==0)continue;
                char_cnts+=1;
                char cur = char(k);
                int max_x = -INF, max_y = -INF, min_x = INF, min_y = INF;
                for(int i=0; i<grid.size(); i++){
                    for(int j=0; j<grid[0].size(); j++){
                        if(grid[i][j]==cur){
                            max_x = max(max_x, i);
                            max_y = max(max_y, j);
                            min_x = min(min_x, i);
                            min_y = min(min_y, j);
                        }
                    }
                }

                for(int i=min_x; i<=max_x; i++){
                    for(int j=min_y; j<=max_y; j++){
                        if(grid[i][j]=='.'){
                            return "ERROR!";
                        }else if(grid[i][j]!=cur){
                            g[int(cur)][int(grid[i][j])] = 1;
                        }
                    }
                }
            }
            return top_sort();
        
        }

};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    TopView *obj;
    string answer;
    obj = new TopView();
    clock_t startTime = clock();
    answer = obj->findOrder(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    string p1;

    {
        // ----- test 0 -----
        string t0[] = {"..AA..",".CAAC.",".CAAC."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "CA";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"..47..","..74.."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "ERROR!";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"bbb666",".655X5","a65AA5","a65AA5","a65555"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "65AXab";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"aabbaaaaaaaaaaaaaaaaaa","aabbccccccccccccccaaaa","aab11111ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ccccccccccaaaa","aab12221ddddddddddaaaa","aab13331DDDDDDDDDDaaaa","aab13331DDDDDDDDDDaaaa","aa.11111DDDDDDDDDDaaaa","aaaaaaaaaaaaaaaaaaaaaa"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "ERROR!";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
