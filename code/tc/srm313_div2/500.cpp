#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


const int MAXN = 51;
const int INF = 999999999;
int g[MAXN][MAXN];
bool in_set[MAXN];

bool isPrefix(string first_str, string second_str){
    //is the first str prefix of the second
    int first_sz = first_str.size();
    int second_sz = second_str.size();

    if(first_sz > second_sz)return false;
    
    for(int i=0; i<first_sz; i++){
        if(first_str[i]!=second_str[i])return false;
    }
    return true;
}


class PrefixFreeSets {
    public:
        int maxElements(vector <string> words) {
            int N = words.size();
            for(int i=0; i<N; i++){
                in_set[i] = true;
                for(int j=0; j<N; j++){
                    g[i][j] = INF;
                    g[j][i] = INF;
                    if(isPrefix(words[i], words[j]) ){
                        g[i][j] = 1;
                        g[j][i] = 1;
                        cout<<"words "<<words[i]<<" and "<<words[j]<<" are bad "<<endl;
                    }
                }
            }
            while(1){
                bool exit = false;
                for(int i=0; i< N; i++){
                    for(int j=i+1; j<N; j++){
                        if(in_set[i]==false || in_set[j]==false)continue;
                        cout<<"checking "<<words[i]<<" "<<words[j]<<endl;
                        if(isPrefix(words[i], words[j]) || isPrefix(words[j],words[i])){
                        //if(g[i][j] == 1 || g[j][i]==1){
                            cout<<"bad "<<words[i]<<" "<<words[j]<<endl;
                            if(words[i].size()<words[j].size()){
                                in_set[i] = false;
                                cout<<"deleting "<<words[i]<<endl;
                            }else{
                                in_set[j] = false;
                                cout<<"deleting "<<words[j]<<endl;
                            }
                            exit = true;
                            break;
                        }
                    }
                    if(exit)break;
                }
                if(exit==false){
                    break;
                }
            }
            int cnt = 0;
            for(int i=0; i<N; i++){
                if(in_set[i])cnt++;
            }
            return cnt;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    PrefixFreeSets *obj;
    int answer;
    obj = new PrefixFreeSets();
    clock_t startTime = clock();
    answer = obj->maxElements(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    {
        // ----- test 0 -----
        string t0[] = {"hello","hi","h","run","rerun","running"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        string t0[] = {"a","b","cba","cbc","cbb","ccc"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 6;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"a","ab","abc","abcd","abcde","abcdef"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        string t0[] = {"topcoder","topcoder","topcoding"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
