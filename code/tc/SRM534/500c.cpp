#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define MAXN 1<< 21
using namespace std;


class EllysCheckers {
    public:
        int ans ;
        int len;
        int dp[MAXN];
        bool exist_check(string b){
            if(find(b.begin(), b.end(), 'o') != b.end()){
                return 1;
            }return 0;
        }
        
        int convert_s2i(string b){
            int s = 0;
            for(int i=0; i<len; i++){
                if(b[i]=='o'){
                    s = s+(1<<i);
                }
            }
            return s;
        }

        int dfs(string b){  //
            int state = convert_s2i(b);
            if(dp[state]!=-1){
                return dp[state];
            }
            if(!exist_check(b)){
                dp[state] = 0;    
                return 0; //lose
            }
            int t = 0;
            string t_board = b;
            for(int i=0; i<len-1; i++){
                if(b[i]=='o' && b[i+1]=='.'){
                    t_board = b;
                    t_board[i] = '.';
                    t_board[i+1] = 'o';
                    if(i+1==len-1){
                        t_board[i+1]='.';//disappear
                    }
                    int res = dfs(t_board);
                    if(res== 0){
                        t = 1;
                    }
                }
            }
            for(int i=0; i<len-3; i++){
                if(b[i]=='o' && b[i+1]=='o' && b[i+2]=='o' && b[i+3]=='.'){
                    t_board = b;
                    t_board[i] = '.';
                    t_board[i+3] = 'o';
                    if(i+3==len-1){
                        t_board[i+3]='.';
                    }
                    int res = dfs(t_board);
                    if(res==0){
                        t = 1;
                    }
                }
            }
            if(t==1){
                dp[state] = 1; 
                return 1;
            }else{
                dp[state] = 0;
                return 0;
            }
        }
        string getWinner(string board) {
            int n=board.size();
            board[n-1]='.';
            int nums[2];
            nums[0]=nums[1]=0;
            for(int i=0; i<n; i++){
                if(board[n-1-i]=='o' ) ++nums[i%2];
            }
            return nums[1]&1? "YES":"NO";

        }
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	EllysCheckers *obj;
	string answer;
	obj = new EllysCheckers();
	clock_t startTime = clock();
	answer = obj->getWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
    
	{
	// ----- test 0 -----
	p0 = "ooo.";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "..o..o";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	{
	// ----- test 2 -----
	p0 = ".o...ooo..oo..";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
    
	{
	// ----- test 3 -----
	p0 = "......o.ooo.o......";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = ".o..o...o....o.....o";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
