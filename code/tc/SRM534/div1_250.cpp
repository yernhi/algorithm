#include <string.h>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 1<<22;
int dp[MAXN][2];
int sz;


string print_binary(int s){
    string tmp = "";
    
    for(int i=0; i<sz; i++){
        tmp += s %2 + '0';
        s >>=1;
    }
    string r = string(tmp.rbegin(), tmp.rend());
    return r;
}



bool test_one(int state, int pos){
    if(((state >> pos)&1) == 1){
        return true;
    }else{
        return false;
    }
}

int change_one(int state, int pos){
    return (state ^ (1<<pos));
}


class EllysCheckers {
public:
    
    int get_ans(int state, int turn){
        if(state == 0 ){
            return 0;
        }
        if(dp[state][turn]!=-1){
            return dp[state][turn];
        }
        
        int tmp;
        bool ok = false;
        for(int i=1; i<sz; i++){
            if(test_one(state, i)){
                if(test_one(state, i-1)==false){
                    int new_state1 = change_one(state, i);
                    int new_state2 = change_one(new_state1, i-1);
                    
                    if(i-1==0){
                        new_state2 = change_one(new_state2, i-1);
                    }
                    
                    tmp = get_ans(new_state2, 1-turn);
                    if(tmp==1)ok = true;
                }
                if(i>=3){
                    if(test_one(state, i-1) && test_one(state, i-2) && test_one(state, i-3)==false && i-3>=0){
                        int new_state = change_one(state, i);
                        new_state = change_one(new_state, i-3);
                        //cout<<"changing i-3 = "<<i-3<<endl;
                        if(i-3==0){
                            new_state = change_one(new_state, i-3);
                        }
                        tmp = get_ans(new_state, 1-turn);
                        if(tmp==1)ok = true;
                    }
                }
            }
        }
        if(ok==false){
            dp[state][turn] = 1;
            return dp[state][turn];
        }else{
            dp[state][turn] = 0;
            return dp[state][turn];
        }
    }
    
    string getWinner(string board) {
        sz = board.size();
        memset(dp, -1, sizeof(dp));
        int state = 0;
        for(int i=0; i<board.size()-1; i++){
            if(board[i]=='o'){
                state = (1<<(sz-i-1))|state;
            }
        }
        state &= ((1<<sz)-1)-1;

        if(get_ans(state, 1)){
            return "YES";
        }else{
            return "NO";
        }
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    EllysCheckers *obj;
    string answer;
    obj = new EllysCheckers();
    clock_t startTime = clock();
    answer = obj->getWinner(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    string p0;
    string p1;
    
    {
    // ----- test 0 -----
    p0 = ".o...";
    p1 = "YES";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
    }
    {
    // ----- test 1 -----
    p0 = "..o..o";
    p1 = "YES";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    p0 = ".o...ooo..oo..";
    p1 = "NO";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
    }
    {
    // ----- test 3 -----
    p0 = "......o.ooo.o......";
    p1 = "YES";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    p0 = ".o..o...o....o.....o";
    p1 = "NO";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
