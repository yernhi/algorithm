#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

map<string, int> mymap;

class SistersErasingLetters {
    public:
        string g_word;
        bool start(string &str, string &pre){
            if(str.size()<pre.size())return false;
            for(int i=0; i<pre.size(); i++){
                if(str[i]!=pre[i])return false;
            }
            return true;
        }

        int getAnswer(string pre, string suf, int curMove){
            /*
            if(suf.size()==0){
                
                if(pre>g_word){
                    return 1;
                }else{
                    return 0;
                }
            }
            */
            if(start(g_word, pre)==false || suf.size()==0){
                if(pre>g_word){
                    return 1;
                }else{
                    return 0;
                }
            }
            string state = pre+" "+suf+" "+char(curMove+'0');
            if(mymap.find(state)!=mymap.end()){
                return mymap[state];
            }
            mymap[state] = 1- curMove;
            for(int i=0; i<suf.size(); i++){
                string new_pre = pre+suf.substr(0, i);
                string new_suf = suf.substr(i+1, suf.size()-i-1);
                int res = getAnswer(new_pre, new_suf, 1-curMove);
                cout<<"original "<<state<<" new pre = "<<new_pre<<" new suf = "<<new_suf<<" res = "<<res<<endl;
                if(res==curMove){
                    mymap[state] = curMove;
                }
            }
            /*
            if(possible){
                mymap[state] = curMove;
            }else{// if(possible && curMove==0){
                mymap[state] = curMove^1;
            }*/
            return mymap[state];

        }


        string whoWins(string word) {
            g_word = word;
            mymap = map<string, int> ();
            mymap.clear();
            int ans = getAnswer("", word, 1);    
            if(ans==1){
                return "Camomile";
            }else{
                return "Romashka";
            }
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    SistersErasingLetters *obj;
    string answer;
    obj = new SistersErasingLetters();
    clock_t startTime = clock();
    answer = obj->whoWins(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = "topcoder";
        p1 = "Camomile";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "program";
        p1 = "Romashka";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "abcd";
        p1 = "Camomile";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "abc";
        p1 = "Romashka";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }
return 0;
    {
        // ----- test 4 -----
        p0 = "easyproblemroundfivetopcoderopentwothousandeleven";
        p1 = "Camomile";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
