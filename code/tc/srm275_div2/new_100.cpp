#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
const int MAXN = 11;
int mycount[MAXN][MAXN];
const int INF = 999999999;

typedef pair <string, int> pii;

set < string > traces;

class GreedyGovernment {
    public:
        double maxAverageCost(vector <string> tolls, int tollHike) {
            memset(mycount, 0, sizeof(mycount));
            queue < pii > Q;
            pii init("0", 1);
            Q.push( init );
            int n_tolls = tolls.size();
            int tolls_sum = 0;
            traces.clear();
            while(!Q.empty()){
                pii cur_state = Q.front();
                Q.pop();
                int cur_pos = cur_state.first[cur_state.first.size()-1]-'0';
                //cout<<"cur at "<<cur_pos<<endl;
                if(cur_pos==n_tolls-1){
                    traces.insert( cur_state.first) ;
                    //insert here
                    continue;
                }
                int state = cur_state.second;
                for(int i=0; i<n_tolls; i++){
                    if(tolls[cur_pos][i]!='X' && ((state>>i)&1)==0){
                        //cout<<" next pos is "<<i<<" add "<<tolls[cur_pos][i]<<endl;
                        pii next_state( pii(cur_state.first+char(i+'0'), ((1<<i)|state) ) ); 
                        Q.push(next_state);
                    }
                }
            }

            int n_lines=0;
            for(set <string>::iterator it=traces.begin(); it!=traces.end(); it++){
                //cout<<"trace - "<<(*it)<<endl;
                string t = (*it);
                for(int i=0; i<t.size()-1; i++){
                    int from = t[i]-'0';
                    int to = t[i+1] - '0';
                    tolls_sum += tolls[from][to]-'0';
                    mycount[ from][to]+=1;
                }
                n_lines+=1;
            }

            int t_max = -INF;
            for(int i=0; i<n_tolls; i++){
                for(int j=0; j<n_tolls; j++){
                    t_max = max(t_max, mycount[i][j]);
                    //cout<<mycount[i][j]<<" ";
                }
                //cout<<endl;
            }
            cout<<"t_max = "<<t_max<<endl;
            cout<<"tolls_sum = "<<tolls_sum<<endl;
            if(n_lines==0)return 0;
            return (tolls_sum+t_max*tollHike*1.0)/n_lines; 
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, double p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    GreedyGovernment *obj;
    double answer;
    obj = new GreedyGovernment();
    clock_t startTime = clock();
    answer = obj->maxAverageCost(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    double p2;

    {
        // ----- test 0 -----
        string t0[] = {"X324","XXX2","12X5","991X"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 9;
        p2 = 10.0;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"X324","5X22","12X5","991X"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 57;
        p2 = 29.2;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"X11","2X1","37X"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 76;
        p2 = 39.5;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"X32X","XXXX","XXXX","XXXX"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 99;
        p2 = 0.0;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
