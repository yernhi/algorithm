#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class EllysReversals {
    public:
        string reverse_first(string a, int k){
            int front =0, rear = k-1;
            while(front<rear){
                char t = a[front];
                a[front] = a[rear];
                a[rear] = t;
                front++,rear--;
            }
            return a;
        }
        int sub_equal(string a, string b){
            for(int i=2; i<=a.size(); i+=2){
                if(a.substr(0,i)==b.substr(0,i)){
                    //a = a.substr(i,sz_a-i);
                    //b = b.substr(i,sz_a-i);
                    return i;
                }
            }
            return -1;
        }

        bool check(string a, string b){
            int sz_a = a.size();
            int sz_b = b.size();
            if(sz_a != sz_b){
                return 0;
            }

            string t_a = a, t_b = b;

            sort(t_a.begin(), t_a.end());
            sort(t_b.begin(), t_b.end());
            if(t_a!=t_b){
                return 0;
            }
            if(sz_a<=1)return 1;

            cout<<"checking "<<a<<" "<<b<<endl;
            bool ok;
            while(1){
                sz_a = a.size();
                ok = false; 
                cout<<"now a and b are "<<a<<" "<<b<<endl;
                t_b = b.substr(sz_a-2, 2);
                t_b = reverse_first(t_b,2);
                if(t_b == a.substr(0,2)){
                    ok = true;
                    a = reverse_first(a,sz_a);
                    a = a.substr(0,sz_a-2);
                    b = b.substr(0,sz_a-2);
                }else{
                    size_t found = a.find(b.substr(sz_a-2,2));
                    cout<<"search "<<b.substr(sz_a-2,2)<<" in "<<a<<endl;
                    if(found!=std::string::npos && found%2==0){
                        a = reverse_first(a, found+2);
                        a = a.substr(2,sz_a-2);
                        b = b.substr(0, sz_a-2);
                        ok = true;
                    }
                }
                
                if(ok==false || a.size()==0 || a.size()==1)break;
            }
            if(a.size()==0){
                cout<<"yes!"<<endl;
                return true;
            }
            return false;
        }

        int getMin(vector <string> words) {
            int sz = words.size();

            while(1){
                bool deleted = 0;
                sz = words.size();
                vector<string> new_words;
                for(int i=0; i<sz; i++){
                    for(int j=i+1; j<sz; j++){
                        if(check(words[i], words[j]) && check(words[j], words[i]) ){
                            for(int k=0; k<sz; k++){
                                if(k!=i && k!=j)new_words.push_back(words[k]);
                            }
                            deleted = true;
                        }
                        if(deleted)break;
                    }
                    if(deleted)break;
                }
                if(!deleted){
                    break;
                }
                words = new_words;
            }
            return words.size();

        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    EllysReversals *obj;
    int answer;
    obj = new EllysReversals();
    clock_t startTime = clock();
    answer = obj->getMin(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;

    {
        // ----- test 0 -----
        string t0[] = {"esprit","god","redotopc","odcpoter","dog"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
return 0;
    {
        // ----- test 1 -----
        string t0[] = {"no","zaphod","just","very","improbable"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 5;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"rats","live","stressed","to","act","as","star","desserts","of","evil","cat","sa","fo","ot"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"topcoder","redocpot","doretopc","cpotdoer","harlemshake"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"iprlzgukfggzg","bmhxvjbrtkbxy","khapjiabbny","nqlwgmcyvdikt","nxromtvtpug","leealcapovm","ushnxwjczczbmd","bwhykzupcux","xrlboyuwlnsp","bbjoketeheezfs","dxfztrldomjqkv","dkbktqdtgfujcut","zfybzyuxgpnt","ffmsldrdftode","vopuufksxd","pqhbsiujwda","yhwbkzupcux","hkbabnapjiy","zqsqefrrzehtxn","yovinyguyudmv"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 16;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
