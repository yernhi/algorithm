#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 30;
const double INF = 999999999.9;
double g[MAXN][MAXN], dp[MAXN][MAXN];;

class AirTravel {
    public:
        int N;
        double dis(double lat1, double lon1, double lat2, double lon2){
            double radius = 4000;
            double mul = 3.14159265358979323 / 180;
            double ans = radius* acos(sin(lat1*mul) * sin(lat2*mul) + cos(lat1*mul) * cos(lat2*mul) * cos(lon1*mul - lon2*mul));;
            return ans;
        }

        void floyd(){
            for(int i=0; i<MAXN; i++){
                for(int j=0; j<MAXN; j++){
                    dp[i][j] = g[i][j];
                }
            }

            for(int k=0; k<N; k++){
                for(int i=0; i<N; i++){
                    for(int j=0; j<N; j++){
                        dp[i][j] = min(dp[i][k]+dp[k][j], dp[i][j]);
                    }

                }
            }

        }


        double shortestTrip(vector <int> latitude, vector <int> longitude, vector <string> canTravel, int origin, int destination) {
            N = latitude.size();
            for(int i=0; i<MAXN; i++)for(int j=0; j<MAXN; j++){
                g[i][j] = INF;
            }

            for(int i=0; i<canTravel.size(); i++){
                istringstream ins(canTravel[i]);
                int tmp;
                while(ins>>tmp){
                    g[i][tmp] = dis(latitude[i]*1.0, longitude[i]*1.0, latitude[tmp]*1.0, longitude[tmp]*1.0);
                    cout<<"g["<<i<<"]["<<tmp<<"] = "<<g[i][tmp]<<" paras "<<latitude[i]<<" "<<longitude[i]<<" "<<latitude[tmp]<<" "<<longitude[tmp]<<endl;
                }
                g[i][i] = 0.0;
            }
            floyd();
            if(dp[origin][destination]>=INF){
                return -1.0;
            }else{
                return dp[origin][destination];
            }

        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <string> p2, int p3, int p4, bool hasAnswer, double p5) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}" << "," << p3 << "," << p4;
    cout << "]" << endl;
    AirTravel *obj;
    double answer;
    obj = new AirTravel();
    clock_t startTime = clock();
    answer = obj->shortestTrip(p0, p1, p2, p3, p4);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p5 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p5 - answer) <= 1e-9 * max(1.0, fabs(p5));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    vector <string> p2;
    int p3;
    int p4;
    double p5;

    {
        // ----- test 0 -----
        int t0[] = {0,0,70};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {90,0,45};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"2","0 2","0 1"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0;
        p4 = 1;
        p5 = 10612.237799994255;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {0,0,70};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {90,0,45};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"1 2","0 2","0 1"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0;
        p4 = 1;
        p5 = 6283.185307179586;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {0,30,60};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {25,-130,78};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"1 2","0 2","1 2"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0;
        p4 = 0;
        p5 = 0.0;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {0,20,55};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {-20,85,42};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        string t2[] = {"1","0","0"};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 0;
        p4 = 2;
        p5 = -1.0;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
