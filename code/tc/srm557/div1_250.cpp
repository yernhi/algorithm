#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FoxAndMountainEasy {
    public:
        string possible(int n, int h0, int hn, string history) {
            int level = 0;
            int lowest = 0;
            for(int i=0; i<history.size(); i++){
                if(history[i]=='U'){
                    level++;
                }else{
                    level--;
                }
                lowest = min(lowest, level);
            }
            int sz = history.size();

            int cur = 0;
            if(h0+lowest<0){
                cur += 0-(h0+lowest);
                cout<<"I moved "<<0-(h0+lowest)<<endl;
                cout<<"low = "<<lowest<<endl;
                h0 += -(h0+lowest);
            }
            cout<<"sz = "<<sz<<endl;
            cout<<"level = "<<level<<endl;
            cur+=sz;
            h0+=level;
            cout<<"so h0 = "<<h0<<endl;
            int left = n-cur;
            int dif = hn-h0;
            cout<<"dif = "<<dif<<endl;
            cout<<"left = "<<left<<endl;
            
            if(dif%2==0){
                if(left%2==1){
                    return "NO";
                }
            }else{
                if(left%2==0){
                    return "NO";
                }
            }

            cout<<"ok here"<<endl;
            if(abs(dif)<=left){
                return "YES";
            }else{
                return "NO";
            }





            bool ans = false;
            for(int i=0; i+sz<n; i++){
                int left_min = h0-i+level;
                int left_max = h0+i+level;
                cout<<"n-i-sz = "<<n-i-sz<<endl;
                int right_max = hn+(n-i-sz);
                int right_min = hn-(n-i-sz) ;
                cout<<"i = "<<i<<" left min,max = "<<left_min<<" "<<left_max<<" "<< right_min<<" "<<right_max<<endl;
                if(left_min>=0 && ((left_min<=right_max&&left_min>=right_min) || (left_max>=right_min && left_max<=right_max))){
                    ans = true;
                }
            }

            if(ans){
                return "YES";
            }return "NO";

        }
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, string p3, bool hasAnswer, string p4) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "\"" << p3 << "\"";
    cout << "]" << endl;
    FoxAndMountainEasy *obj;
    string answer;
    obj = new FoxAndMountainEasy();
    clock_t startTime = clock();
    answer = obj->possible(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p4 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p4;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    string p3;
    string p4;

    {
        // ----- test 0 -----
        p0 = 4520;
        p1 = 9;
        p2 = 39;
        p3 = "UUDDUDDUDDDUDDDDDDDDDUDUDUDDDDU";
        p4 = "YES";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 4;
        p1 = 0;
        p2 = 4;
        p3 = "D";
        p4 = "NO";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4;
        p1 = 100000;
        p2 = 100000;
        p3 = "DDU";
        p4 = "YES";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        p1 = 0;
        p2 = 0;
        p3 = "DDU";
        p4 = "NO";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 20;
        p1 = 20;
        p2 = 20;
        p3 = "UDUDUDUDUD";
        p4 = "YES";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 20;
        p1 = 0;
        p2 = 0;
        p3 = "UUUUUUUUUU";
        p4 = "YES";
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        p0 = 20;
        p1 = 0;
        p2 = 0;
        p3 = "UUUUUUUUUUU";
        p4 = "NO";
        all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
