#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int sz =0 ;
vector<int> all_numbers;
class NumbersChallenge {
    public:
        void dfs(int cur_sum, vector<int> &S, int pos){
            if(pos==sz){
                all_numbers.push_back(cur_sum);
                return ;
            }
            dfs(cur_sum+S[pos], S, pos+1);
            dfs(cur_sum, S, pos+1);
        }

        int MinNumber(vector <int> S) {
            sz = S.size();
            all_numbers = vector<int>();
            dfs(0, S, 0);
            
            sort(all_numbers.begin(), all_numbers.end());
          
            int n_all = all_numbers.size();



            vector<int> tmp;
            tmp.push_back(all_numbers[0]);
            for(int i=1; i<n_all; i++){
                if(all_numbers[i] != all_numbers[i-1]){
                    tmp.push_back(all_numbers[i]);
                }
            }

            n_all = tmp.size();

            if(tmp[1] > 1){
                return 1;
            }else{
                for(int i=2; i<n_all; i++){
                    if(tmp[i-1]+1!=tmp[i]){
                        return tmp[i-1]+1;
                    }
                }
            }
            return tmp[n_all-1] + 1;
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    NumbersChallenge *obj;
    int answer;
    obj = new NumbersChallenge();
    clock_t startTime = clock();
    answer = obj->MinNumber(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;

    {
        // ----- test 0 -----
        int t0[] = {1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        int t0[] = {2,1,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 8;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {2,1,2,7};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 6;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        int t0[] = {94512,2,87654,81316,6,5,6,37151,6,139,1,36,307,1,377,101,8,37,58,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1092;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {883,66392,3531,28257,1,14131,57,1,25,88474,4,1,110,6,1769,220,442,7064,7,13};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 56523;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
