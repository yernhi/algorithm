#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;



const int MAXN = 52;
const int INF = 1000000001;
bool onFloor[MAXN];

int g[MAXN][MAXN];

vector<int> getNumbers(string s){
    int num = 0;
    int inNumber = false;
    vector<int> numbers;
    s+='#';
    for(int i=0; i<s.size(); i++){
        if(s[i]>='0' && s[i]<='9' ){
            if(inNumber==true){
                num = num*10+s[i]-'0';
            }else{
                inNumber = true;
                num = s[i]-'0';
            }
        }else{
            if(inNumber){
            inNumber = false;
            numbers.push_back(num);
            }
        }
    }
    return numbers;
}


class BagsQuiz {
    public:
        int checkIfProper(int n, vector <string> actions) {
            for(int i=0; i<MAXN; i++)onFloor[i] = true;
            for(int i=0; i<MAXN; i++)for(int j=0; j<MAXN; j++)g[i][j] = INF;
            
            for(int i=0; i<actions.size(); i++){
                vector<int> numbers = getNumbers(actions[i]);
                if(actions[i][0]=='P'){
                    if(onFloor[numbers[0]] && onFloor[numbers[1]]){
                        g[numbers[1]][numbers[0]] = 1;
                        onFloor[numbers[0]] = false;
                    }else{
                        return -1;
                    }
                }else if(actions[i][0]=='S' && actions[i][1]=='E'){
                    if(onFloor[numbers[0]]){
                        for(int k=1; k<=n; k++){
                            if(g[numbers[0]][k]==1){
                                g[numbers[0]][k] = 0;
                                onFloor[k] = true;
                            }
                        }
                    }else{
                        return -1;
                    }
                }else if(actions[i][0]=='S' && actions[i][1]=='W'){
                    if(onFloor[numbers[0]] && onFloor[numbers[1]]){
                        int tmp[MAXN];
                        for(int k=1; k<=n; k++){
                            tmp[k] = g[numbers[0]][k];
                            g[numbers[0]][k] = g[numbers[1]][k];
                        }
                        for(int k=1; k<=n; k++){
                            g[numbers[1]][k] = tmp[k];
                        }
                    }else{
                        return -1;
                    }
                }
            }

            //check
            for(int i=1; i<=n; i++){
                for(int j=1; j<=n ;j++){
                    if(g[i][j]==1 && i<j){
                        cout<<i<<" "<<j<<endl;
                        return -1;
                    }
                }
            }
            int cnt = 0;
            for(int i=1; i<=n; i++){
                if(onFloor[i]){
                    cnt++;
                }
            }
            return cnt;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    BagsQuiz *obj;
    int answer;
    obj = new BagsQuiz();
    clock_t startTime = clock();
    answer = obj->checkIfProper(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    vector <string> p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = 2;
        string t1[] = {"PUT 1 INSIDE 2"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        string t1[] = {"PUT 1 INSIDE 2","SET 2 LOOSE"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 2;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 2;
        string t1[] = {"PUT 2 INSIDE 1"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = -1;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 4;
        string t1[] = {"PUT 3 INSIDE 2","SWAP 4 WITH 2","PUT 2 INSIDE 4","SET 1 LOOSE"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 2;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 3;
        string t1[] = {"PUT 1 INSIDE 2","PUT 3 INSIDE 1"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = -1;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
