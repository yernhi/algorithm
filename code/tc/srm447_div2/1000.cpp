#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
const int MAXN = 201;
vector<int> g[MAXN];
bool visited[MAXN];
class ImportsList {
    public:
        int dfs(int cur){
            if(visited[cur])return 0;
            for(int i=0; i<g[cur].size(); i++){
                visited[g[cur][i]]=1;
                dfs(g[cur][i]);
            }
        }

        int work(int start){
            for(int i=0; i<g[start].size(); i++){
                if(visited[g[start][i]]==0){
                    dfs(g[start][i]);
                }
            }
        }


        vector <int> importsCount(vector <string> requires) {
            for(int i=0; i<MAXN; i++)g[i].clear();
            int sz = requires.size();
            for(int i=0; i<sz; i++){
                for(int j=0; j<sz; j++){
                    if(requires[i][j]=='Y')g[i].push_back(j);
                }
            }

            for(int i=0; i<sz; i++){
                int num = bfs(i);
            }


        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    ImportsList *obj;
    vector <int> answer;
    obj = new ImportsList();
    clock_t startTime = clock();
    answer = obj->importsCount(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p1[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p1.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p1[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <int> p1;

    {
        // ----- test 0 -----
        string t0[] = {"NNN","NNN","NNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {0,0,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"NYYY","NNYY","NNNY","NNNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,1,1,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"NNNNY","NNNNY","YNNNY","NNNNN","NNNNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,1,1,0,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"NYYNYNYYYNYYNYNN","NNNNNNNNNNNNNNNN","NNNNNNNNNNYNNNNN","NNNNNNNNNYNNYNNN","NYNNNNYNNNYYNNNN","NYNNYNYNYNYYNNNN","NNNNNNNNNNYNNNNN","NNYNNNYNYNYNNNNN","NNNNNNYNNNYNNNNN","NNNNNNNNNNNNYNNN","NNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNN","NNNNNNYNNNYNNNNN","YYYYYNYYYYYYYYNY","NYYYNNYNNYYNYYNN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {3,0,1,1,3,2,1,2,1,1,0,0,0,1,2,4};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
