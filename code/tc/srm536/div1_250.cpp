#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


int get_sum(int start, int end, vector<int> revenues){
    int tmp = 0;
    for(int i=start; i<=end; i++){
        tmp += revenues[i];
    }
    return tmp;
}
const double INF = 999999999;

class MergersDivOne {
    public:
        double findMaximum(vector <int> revenues) {
            sort(revenues.begin(), revenues.end());
            int sz = revenues.size();
            
            
            for(int i=0; i<sz; i++){
                cout<<revenues[i]<<" ";
            }cout<<endl;

            double ans = revenues[0];
            for(int i=1; i<sz; i++){
                ans = (revenues[i] + ans)*1.0/2;
            }
            return ans;

            int pos = 1; 
            
            
            for(int i=1; i<sz; i++){
                if(ans<=0 || revenues[i] <= 0){
                    ans = (revenues[i] + ans)*1.0/2;
                    pos = i;
                }
            }
            cout<<"pos = "<<pos<<" "<<ans<<endl;
            pos += 1;
            for(int i=pos; i<sz; i++){
                double cur = -INF;
                bool full = false;
                for(int j=i; j<sz; j++){
                    double _tmp = (ans + get_sum(i, j, revenues))/(j-i+1 + 1);
                    cout<<"checking "<<i<<" "<<j<<" "<<_tmp<<endl;
                    if(_tmp > cur){
                        cur = _tmp;
                        if(j==sz-1)full = true;
                    }else{
                        i = j-1;
                        break;
                    }
                }
                ans = max(ans, cur);
                if(full)break;
            }
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, double p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    MergersDivOne *obj;
    double answer;
    obj = new MergersDivOne();
    clock_t startTime = clock();
    answer = obj->findMaximum(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    double p1;

    {
        // ----- test 0 -----
        int t0[] = {615, -832, -191, -2, 836, -86, -71, 231, -594, -340, -929, -746, -403, 758, 565, 518, 818, -257, -925, -727, -808, 328, -241, -648, -999, 303};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 785.5180625319481;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        int t0[] = {10,-17};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = -3.5;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {12,12,12,12,12};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 12.0;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {0,0,0,0,0,100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 50.0;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {10,-10,100,-100,1000,-1000};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 491.25;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
