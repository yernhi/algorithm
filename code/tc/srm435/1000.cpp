#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 25;

double dp[MAXN][MAXN];
long long int C[MAXN][MAXN];

long long int getC(int n, int r){
    if(r==0)return 1;
    if(r==n)return 1;
    if(C[n][r]!=-1)return C[n][r];
    long long int a = getC(n-1,r-1);
    long long int b = getC(n-1,r);
    C[n][r] = a+b;
    return a+b;
}

class BirdsCounting {
    public:
        double computeProbability(int birdsNumber, int caughtPerDay, int daysNumber, int birdsMarked) {
            memset(dp,0,sizeof(dp));
            dp[1][caughtPerDay] = 1;
            memset(C,-1,sizeof(C));
            cout<<getC(10,2)<<endl;
            for(int i=1; i<daysNumber; i++){
                for(int j=0; j<=birdsNumber; j++){
                    cout<<"at "<<i<<" "<<j<<endl;
                    int marked = j;
                    int unmarked = birdsNumber-marked;
                    for(int next=j; next<=j+caughtPerDay && next<=birdsNumber; next++){
                        int new_unmarked = next-marked;
                        
                        if(unmarked<new_unmarked || marked < caughtPerDay-new_unmarked){
                            continue;
                        }

                        long long int com = getC(unmarked, new_unmarked)*getC(marked, caughtPerDay-new_unmarked);
                        double p = com*1.0/getC(birdsNumber, caughtPerDay);
                        dp[i+1][next] += p*dp[i][j];
                        cout<<"C("<<unmarked<<","<<new_unmarked<<")="<<getC(unmarked,new_unmarked)<<"& C("<<marked<<","<<caughtPerDay-new_unmarked<<") = "<<getC(marked,caughtPerDay-new_unmarked)<<" dp["<<i+1<<"]["<<next<<"] = "<<dp[i+1][next]<<endl;
                    }

                }
            }
            return dp[daysNumber][birdsMarked];
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
    cout << "]" << endl;
    BirdsCounting *obj;
    double answer;
    obj = new BirdsCounting();
    clock_t startTime = clock();
    answer = obj->computeProbability(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;
    double p4;

    {
        // ----- test 0 -----
        p0 = 4;
        p1 = 2;
        p2 = 3;
        p3 = 4;
        p4 = 0.5277777777777778;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 3;
        p1 = 1;
        p2 = 2;
        p3 = 2;
        p4 = 0.6666666666666666;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 8;
        p1 = 3;
        p2 = 3;
        p3 = 7;
        p4 = 0.2582908163265306;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        p0 = 5;
        p1 = 3;
        p2 = 2;
        p3 = 4;
        p4 = 0.6;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    {
        // ----- test 4 -----
        p0 = 20;
        p1 = 6;
        p2 = 5;
        p3 = 17;
        p4 = 0.30035494805367574;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
