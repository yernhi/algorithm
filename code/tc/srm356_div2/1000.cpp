#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


const int MAXN = 500;
const int INF = 999999999;
int g[MAXN][MAXN];
string R[MAXN][MAXN];
map<string, int> name;


int visited[MAXN];
int dis[MAXN];
int scan[MAXN];

string prim(int start){
    for(int i=0; i<MAXN; i++){
        dis[i] = INF;
    }
    memset(visited,0,sizeof(visited));
    
    int sz = name.size();
    dis[0] = 0;
    int sum = 0;
    vector<string> ans;
    cout<<"names : "<<name.size()<<endl; 

    bool ok = 1;
    
    for(int node = 0; node<name.size()-1; node++){
        int t_min = INF;
        int loc = -1;
        for(int i=0; i<sz; i++){
            if(t_min > dis[i] && visited[i]==0){
                t_min = dis[i];
                loc = i;
            }
        }
        if(loc==-1){
            ok = 0;
            break;
        }
        cout<<"loc = "<<loc<<endl;
        cout<<"t_min = "<<t_min<<endl;
        if(t_min!=0 ){
            ans.push_back( R[scan[loc]][loc]);
            cout<<"road -> "<<R[scan[loc]][loc]<<endl;
        }
        visited[loc] = 1;
        sum+=dis[loc];
        for(int i=0; i<sz; i++){
            if(g[loc][i] < dis[i]){
                dis[i] = g[loc][i];
                scan[i] = loc;
            }
        }
    }
    if(ok==0){
        return "IMPOSSIBLE";
    }
    if( ans.size() == 0 ){
        return "";
    }else{
        sort(ans.begin(), ans.end());
        string r = "";
        for(int i=0; i<ans.size()-1; i++){
            r+=ans[i]+" ";
        }r+=ans[ans.size()-1];

            return r;
    }
}

class RoadReconstruction {
    public:
        string selectReconstruction(vector <string> roads) {
            string from, to, road;
            
            name = map<string, int>();
            sort(roads.begin(), roads.end());
            for(int i=0; i<MAXN; i++)for(int j=0; j<MAXN; j++){
                g[i][j] = INF;
            }

            int cnt = 0;
            for(int i=0; i<roads.size(); i++){
                istringstream in(roads[i]);
                in>>road;
                in>>from;
                int a,b;
                if( name.find(from) != name.end()){
                    a = name[from];
                }else{
                    name[from] = cnt;
                    a = cnt;
                    cnt++;
                }

                in>>to;
                if( name.find(to) != name.end()){
                    b = name[to];
                }else{
                    name[to] = cnt;
                    b = cnt;
                    cnt++;
                }
                cout<<"road = "<<road<<" from: "<<from<<" to: "<<to<<endl;
                R[a][b] = road;
                R[b][a] = road;
                cout<<"a = "<<a<<" b = "<<b<<endl;
                int cost = -1;
                while(in>>cost);
                if(cost==-1){
                    g[a][b] = 0;
                    g[b][a] = 0;
                }else{
                    cout<<"oh cost = "<<cost<<endl;
                    cout<<" from "<<a<<" to "<<b<<" !!!!"<<endl;
                    g[a][b] = cost;
                    g[b][a] = cost;
                }
            }
            string ans = prim(0);
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    RoadReconstruction *obj;
    string answer;
    obj = new RoadReconstruction();
    clock_t startTime = clock();
    answer = obj->selectReconstruction(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    string p1;

    {
        // ----- test 0 -----
        string t0[] = {"M1 Moscow Kiev 1","M2 Minsk Kiev","M3 Minsk Warsaw"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "M1";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
    
    {
        // ----- test 1 -----
        string t0[] = {"R1 NY Washington","M1 Moscow StPetersburg 1000"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "IMPOSSIBLE";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"B1 Bratislava Havka"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        string t0[] = {"M1 Moscow StPetersburg 1","M2 Moscow Saratov 2","S0 Saratov StPetersburg"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "M1";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"O1 Beetown Fearnot 6","N7 Fearnot Hornytown","M8 Hornytown Belcher 10","L5 Belcher Fearnot 8","C7 Fearnot Beetown 4","K7 Quiggleville Beetown 12","H4 Beetown DryFork 6","Z0 Hornytown Belcher 1","O5 Belcher Quiggleville 10","U7 Quiggleville Fearnot 2","A8 Fearnot Quiggleville 8","T6 Beetown DryFork 17","E8 Quiggleville DryFork 8","Y4 DryFork Quiggleville 4","Q8 Hornytown DryFork 2","J9 Quiggleville DryFork 19","M4 DryFork Quiggleville 7","T1 DryFork Fearnot 9","G4 Fearnot DryFork 6","V9 Hornytown Beetown 5","O6 Quiggleville Beetown 4","L8 Beetown Roachtown 5","D5 Belcher DryFork 8","W5 Belcher DryFork 1"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "C7 L8 U7 W5 Z0";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
