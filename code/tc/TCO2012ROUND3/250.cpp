#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


const int MAXN = 101;
const int INF = 99999999;
int dp[MAXN][MAXN][MAXN][2];

class CrossingTheRiver {
    public:
        string isItEvenPossible(int waterWidth, int landWidth, vector <int> blockHeight, int depth) {
            blockHeight.push_back(-INF);
            sort(blockHeight.begin(), blockHeight.end());
            cout<<"after sorting"<<endl;
            for(int i=0; i<blockHeight.size(); i++){
                cout<<blockHeight[i]<<" ";
            }
            cout<<endl;

            for(int i=0; i<MAXN; i++)for(int j=0; j<MAXN; j++)for(int k=0; k<MAXN; k++)for(int p=0; p<2; p++){
                dp[i][j][k][p] = 0;
            }

            dp[0][0][0][0] = 1;
            dp[0][0][0][1] = 1;

            int allSz = waterWidth+landWidth;
            int barSize = blockHeight.size();
            for(int i=0; i<=allSz; i++){
                for(int j=0; j<=barSize; j++){
                    for(int k=0; k<MAXN; k++){
                        for(int p=0; p<2; p++){
                            if(dp[i][j][k][p]==0)continue;
                            for(int nextBar=j+1; nextBar<barSize; nextBar++){
                                for(int nextP=0; nextP<2; nextP++){
                                    int d;
                                    if(i<waterWidth){
                                        d = blockHeight[nextBar]-depth;
                                    }else{
                                        d = blockHeight[nextBar];
                                    }
                                    if(d-k==1 || d-k==0){
                                        //cout<<"from "<<k<<" to "<<d<<endl;
                                        cout<<i+1<<" "<<nextBar<<" "<<d<<endl;
                                        dp[i+1][nextBar][d][nextP] = 1;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            bool ok = false;

            for(int j=0; j<MAXN; j++){
                for(int k=0; k<MAXN; k++){
                    for(int p=0; p<2; p++){
                        if(dp[allSz][j][k][p]){
                            ok = true;
                        }
                    }
                }
            }
            
            for(int j=0; j<MAXN; j++){
                for(int k=0; k<MAXN; k++){
                    for(int p=0; p<2; p++){
                        if(dp[waterWidth][j][k]){
                            ok = true;
                        }
                    }
                }
            }
            if(ok){
                return "POSSIBLE";
            }else{
                return "IMPOSSIBLE";
            }

        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, int p3, bool hasAnswer, string p4) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << p3;
    cout << "]" << endl;
    CrossingTheRiver *obj;
    string answer;
    obj = new CrossingTheRiver();
    clock_t startTime = clock();
    answer = obj->isItEvenPossible(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p4 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p4;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <int> p2;
    int p3;
    
    string p4;
    /*
    {
        // ----- test 0 -----
        p0 = 3;
        p1 = 3;
        int t2[] = {3,4,4,5,5,6};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4 = "POSSIBLE";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        p0 = 3;
        p1 = 3;
        int t2[] = {3,4,4,5,6,6};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4 = "IMPOSSIBLE";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    {
        // ----- test 2 -----
        p0 = 5;
        p1 = 2;
        int t2[] = {4,4,4,4,4};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 4;
        p4 = "POSSIBLE";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    {
        // ----- test 3 -----
        p0 = 5;
        p1 = 5;
        int t2[] = {5,5,5,5,5,5,2,3,4,4,6,7,3,2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4 = "POSSIBLE";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 5;
        p1 = 7;
        int t2[] = {6,6,6,6,6,6,6,6,6,6,6,6,7,8,9,10};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 5;
        p4 = "POSSIBLE";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }
    */
    {
        // ----- test 5 -----
        p0 = 1;
        p1 = 1;
        int t2[] = {5,3,4};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        p4 = "IMPOSSIBLE";
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
