#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


const int MAXN = 27;
int graph[MAXN][MAXN];
int show[MAXN];
int ans[MAXN*2];
int ptr = 0;
int should_return = 0;
class FoxAndHandle {
    public:
        void dfs(int cur, int left){
            cout<<"in "<<cur<<" left = "<<left<<endl;
            if(should_return)return ;
            cout<<"in "<<cur<<" left = "<<left<<" didn't return"<<endl;
            left -= 1;
            show[cur] -= 1;
            ans[ptr] = cur;
            ptr ++;
            if(left==0){
                should_return = 1;
                return ;
            }
            
            cout<<"after get in left = "<<left<<endl;

            for(int i=0; i<26; i++){
                if(graph[cur][i] && show[i]>0){
                    dfs(i, left );
                }
            }
            show[cur] += 1;
            ptr --;
            left += 1;
        }

        string lexSmallestName(string S) {
            memset(graph, 0, sizeof(graph));
            memset(show, 0, sizeof(show));
            ptr = 0;
            should_return = 0;
            for(int i=0; i<S.size(); i++){
                show[S[i]-'a'] += 1;
                for(int j=i; j<S.size(); j++){
                    graph[S[i]-'a'][S[i]-'a'] = 1;
                }
            }

            int tmp_sum = 0;
            for(int i=0; i<26; i++){
                show[i] /= 2;
                tmp_sum += show[i];
            }
            cout<<"tmp_sum = "<<tmp_sum<<endl;
            for(int i=0; i<26; i++){
                if(show[i]>0){
                    dfs(i, tmp_sum);
                }
            }

            string res = "";
            for(int i=0; i<ptr; i++){
                res += ans[i]+'a';
            }
            return res;

        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    FoxAndHandle *obj;
    string answer;
    obj = new FoxAndHandle();
    clock_t startTime = clock();
    answer = obj->lexSmallestName(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = "foxfox";
        p1 = "fox";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "ccieliel";
        p1 = "ceil";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "abaabbab";
        p1 = "aabb";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "bbbbaaaa";
        p1 = "bbaa";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "fedcbafedcba";
        p1 = "afedcb";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "nodevillivedon";
        p1 = "deilvon";
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
