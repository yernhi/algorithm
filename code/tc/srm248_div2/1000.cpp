#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 502;
const int INF = 999999999;
int dp[22][MAXN][MAXN];
int zeros_ones_num[MAXN][2];

class BitStrings {
    public:
        void get_zeros_ones(string s, int &zero, int &one){
            zero = 0, one = 0;
            for(int i=0; i<s.size(); i++){
                if(s[i]=='0')zero++;
                if(s[i]=='1')one++;
            }
            return ;
        }

        int maxStrings(vector <string> list, int numZeroes, int numOnes) {
            int sz = list.size();
            for(int i=0; i<22; i++)for(int j=0; j<MAXN; j++)for(int k=0; k<MAXN; k++)dp[i][j][k] = -INF;
            memset(zeros_ones_num, 0, sizeof(zeros_ones_num));
            for(int i=0; i<sz; i++){
                int t_zero, t_one;
                get_zeros_ones(list[i], t_zero, t_one);
                zeros_ones_num[i][0] = t_zero, zeros_ones_num[i][1] = t_one;
            }

            dp[0][0][0] = 0;
            int ans = 0;
            for(int i=0; i<=sz; i++){
                int t_zero = zeros_ones_num[i][0], t_one = zeros_ones_num[i][1];
                for(int j=0; j<MAXN;j++){
                    for(int k=0; k<MAXN; k++){
                            ans = max(ans, dp[i][j][k]);
                        //take
                        if(dp[i][j][k]!=INF && j<=numZeroes && k<=numOnes){
                            dp[i+1][j][k] = max(dp[i+1][j][k], dp[i][j][k]);
                        }
                        if(dp[i][j][k]!=INF && j+t_zero<=numZeroes && k+t_one<=numOnes){
                            dp[i+1][j+t_zero][k+t_one] = max(dp[i][j][k]+1, dp[i+1][j+t_zero][k+t_one]);
                        }
                    }
                }
            }
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1 << "," << p2;
    cout << "]" << endl;
    BitStrings *obj;
    int answer;
    obj = new BitStrings();
    clock_t startTime = clock();
    answer = obj->maxStrings(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        string t0[] = {};

        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 28;
        p2 = 377;
        p3 = 12;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"00","110","101"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 4;
        p3 = 2;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"111","01","11","10","101"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = 9;
        p3 = 5;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {
            "1010","10101010101010101010101010101010101010101010101010"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 500;
        p2 = 500;
        p3 = 20;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
