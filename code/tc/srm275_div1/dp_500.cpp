#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 51;
int dp[MAXN][MAXN][MAXN];

class Horoscope {
    public:
        int maxGoodDays(vector <string> predictions, int R, int W) {
            string s = "";
            for(int i=0; i<predictions.size(); i++)s+=predictions[i];
            memset(dp,0,sizeof(dp));
            if(s[0]=='G'){
                dp[0][1][0] = 1;
            }else{
                dp[0][0][1] = 1;
            }
            int ans = -1;
            for(int i=1; i<s.size(); i++){
                if(s[i]=='G'){
                    //dp[i][j][0] = max(dp[i-1][j-1][0]+1, dp[i-1][
                    for(int j=1; j<R; j++){
                        dp[i][j][0] = max(dp[i-1][j-1][0] + 1, dp[i][j][0]);
                        ans = max(ans, dp[i][j][0]);
                    }
                    for(int j=1; j<W; j++){
                        dp[i][0][j] = max(dp[i-1][0][j-1] , dp[i][0][j]);
                        ans = max(ans, dp[i][0][j]);
                    }
                }else{
                    for(int j=1; j<W; j++){
                        dp[i][0][j] = max(dp[i-1][0][j-1] + 1, dp[i][0][j]);
                        ans = max(ans,dp[i][0][j]);
                    }
                    for(int j=1; j<W; j++){
                        dp[i][j][0] = max(dp[i-1][j-1][0], dp[i][j][0]);
                        ans = max(ans,dp[i][j][0]);
                    }
                }
            }
        
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1 << "," << p2;
    cout << "]" << endl;
    Horoscope *obj;
    int answer;
    obj = new Horoscope();
    clock_t startTime = clock();
    answer = obj->maxGoodDays(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        string t0[] = {"GGBBBGG"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 2;
        p3 = 6;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"GGGG"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        p2 = 2;
        p3 = 3;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"GBGBBB"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        p2 = 4;
        p3 = 6;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"GGGBBBGBGGGB","GGBBBBBBBBBGBGBGBGBGBGBGBGBBBBBBBBBBBBBBGGGG","G"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        p2 = 35;
        p3 = 56;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
