#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


const int MAXN = 100;
int dp[MAXN][MAXN][MAXN];
const int INF = 999999999;

class TheQuestionsAndAnswersDivOne {
    public:
        int find(int questions, vector <string> answers) {
            memset(dp,0,sizeof(dp));
            dp[0][0][0] = 1;
            
            int yes_cnt = 0;
            for(int i=0; i<answers.size(); i++){
                if(answers[i]=="Yes")yes_cnt+=1;
            }
            
            for(int i=0; i<answers.size(); i++){
                for(int known=0; known<=questions; known++){
                    for(int yes=0; yes<=questions; yes++){
                        int no = known - yes;
                        //take an unknown question
                        if( questions-known>0){
                            if(answers[i]=="Yes" ){
                                dp[i+1][known+1][yes+1] += (questions-known)*dp[i][known][yes];
                            }else if(answers[i]=="No"){
                                dp[i+1][known+1][yes] += (questions-known)*dp[i][known][yes];
                            }
                        }
                        
                        //take a previously known question

                        if(answers[i]=="Yes" && yes>0 ){
                            dp[i+1][known][yes] += yes*dp[i][known][yes];
                        }else if(answers[i]=="No" && no>0 ){
                            dp[i+1][known][yes] += no*dp[i][known][yes];
                        }
                        cout<<"dp["<<i<<"]["<<known<<"]["<<yes<<"] = "<<dp[i][known][yes]<<endl;
                    }
                }
            }
            int sum =0;
            for(int i=0; i<=questions; i++){
                sum+=dp[answers.size()][questions][i];
            }
            return sum;
            return dp[answers.size()][questions][yes_cnt];
            
            
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, int p2) {
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    TheQuestionsAndAnswersDivOne *obj;
    int answer;
    obj = new TheQuestionsAndAnswersDivOne();
    clock_t startTime = clock();
    answer = obj->find(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p2;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    vector <string> p1;
    int p2;

    {
        // ----- test 0 -----
        p0 = 6;
        string t1[] = {"No", "Yes", "Yes", "Yes", "Yes", "No", "No", "Yes"};
        
        //p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 40320;
        //all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 1 -----
        p0 = 4;
        string t1[] ={"Yes", "No", "Yes", "No", "Yes", "Yes", "Yes", "No"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1704;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }
    {
        // ----- test 2 -----
        p0 = 3;
        string t1[] = {"Yes","No","No","Yes"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 12;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 3;
        string t1[] = {"Yes","Yes","Yes","No"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 18;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
