#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 31;
long long int dp[MAXN][3][3];
class ForbiddenStrings {
    public:
        long long countNotForbidden(int n) {
           memset(dp,0,sizeof(dp));
           if(n==1)return 3;

           for(int a=0; a<3; a++)for(int b=0; b<3; b++){
               dp[2][a][b] = 1ll;
           }

            for(int i=3; i<=n; i++){
                for(int a=0; a<3; a++){
                    for(int b=0; b<3; b++){
                        for(int c=0; c<3; c++){
                            if(a==b || b==c || a==c){
                                dp[i][b][c] += dp[i-1][a][b];
                            }
                        }
                    }
                }
            }
           long long int ans = 0; 
            for(int a=0; a<3; a++){
                for(int b=0; b<3; b++){
                    ans+=dp[n][a][b];
                }
            }

            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, long long p1) {
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    ForbiddenStrings *obj;
    long long answer;
    obj = new ForbiddenStrings();
    clock_t startTime = clock();
    answer = obj->countNotForbidden(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    long long p1;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 9ll;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 3;
        p1 = 21ll;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 4;
        p1 = 51ll;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
