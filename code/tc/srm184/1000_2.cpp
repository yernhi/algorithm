#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN= 51;
int M[MAXN][MAXN];
int tM[MAXN][MAXN];
int rec[MAXN][MAXN];
int tmp[MAXN][MAXN];
int sz;
const int INF = 99999999;
class TeamBuilder {
    public:
        vector <int> specialLocations(vector <string> paths) {
            sz = paths.size();
            for(int i=0; i<sz; i++){
                for(int j=0; j<sz; j++){
                    M[i][j] = (paths[i][j]-'0'==0?INF:1);
                }
            }

            for(int k=0; k<sz; k++){
                for(int i=0; i<sz; i++){
                    for(int j=0; j<sz; j++){
                        rec[i][j] = min(rec[i][j], M[i][k] + M[k][j]);
                    }
                }
            }

            int reach, be_reach;
            for(int i=0; i<sz; i++){
                bool flag = true;
                for(int j=0; j<sz; j++){
                    if(i==j)continue;
                    if(rec[i][j]==0){
                        flag = false;break;
                    }
                }
                if(flag)reach+=1;
            }
            
            for(int i=0; i<sz; i++){
                bool flag = true;
                for(int j=0; j<sz; j++){
                    if(i==j)continue;
                    if(rec[j][i]==0){
                        flag = false; break;
                    }
                }
                if(flag)be_reach+=1;
            }
            vector<int> ans;
            ans.push_back(reach);
            ans.push_back(be_reach);
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    TeamBuilder *obj;
    vector <int> answer;
    obj = new TeamBuilder();
    clock_t startTime = clock();
    answer = obj->specialLocations(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p1.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p1[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p1.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p1[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    vector <int> p1;

    {
        // ----- test 0 -----
        //string t0[] = {"010","000","110"};
        
        //string t0[] = {"0000000", "0001000", "0100100", "0010001", "1000010", "1000000", "0000110"};
        string t0[] = {};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
return 0;
    {
        // ----- test 1 -----
        string t0[] = {"0010","1000","1100","1000"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,3};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"01000","00100","00010","00001","10000"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {5,5};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"0110000","1000100","0000001","0010000","0110000","1000010","0001000"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,3};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
