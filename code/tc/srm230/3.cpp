#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAXN = 150;
int dp[MAXN][MAXN];

int get_dig(int left, int right, string &s){
    if(right<left)return -1;
    int sum = 0; 
    for(int i=left; i<=right; i++){
        sum = s[i]-'0' + sum*10;
    }
    //cout<<"left right "<<left<<" "<<right<<" "<<sum<<endl;
    return sum;
}

class DeserializeSequence {
    public:
        int howMany(string str) {
            memset(dp,0,sizeof(dp));
            string input = str;
            cout<<"input is "<<input<<endl;
            dp[0][0] = 1;
            int sz = input.size();

            for(int i=0; i<=sz; i++){
                for(int j=i; j<=sz; j++){
                    for(int k=j+1; k<=sz; k++){
                        //if(j-i>7 || k-j>7)continue;
                        int first = get_dig(i,j-1,input);
                        int second = get_dig(j, k-1, input);
                        if(first>1000000 || second>1000000)break;
                        if( (first==-1|| (first>=1&&first<=1000000)) && (second==-1||(second>=1&&second<=1000000 && first<=second))){
                            //if(j-i<=7&&k-j<=7&& get_dig(i,j-1,input)<=1000000     get_dig(i,j-1, input)<get_dig(j,k-1, input)){
                            dp[j][k]+=dp[i][j];
                            cout<<"from "<<i<<" "<<j<<" to "<<j<<" "<<k<<" dp["<<i<<"]["<<j<<"] = "<<dp[i][j];
                            cout<<" dp["<<j<<"]["<<k<<"] = "<<dp[j][k]<<endl;
                            cout<<"now the two digits are "<<i<<" "<<j-1<<" "<<j<<" "<<k<<" "<<get_dig(i,j-1,input)<<" "<<get_dig(j,k,input)<<endl;
                        }
                        }
                    }
                }
                int ans = 0;
                for(int i=0; i<=sz; i++){
                    if(dp[i][sz]!=0){
                        cout<<"dp["<<i<<"]["<<sz<<"]="<<dp[i][sz]<<endl;
                    }
                    ans+=dp[i][sz];
                }
                return ans;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    DeserializeSequence *obj;
    int answer;
    obj = new DeserializeSequence();
    clock_t startTime = clock();
    answer = obj->howMany(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    string p0;
    int p1;

    {
        // ----- test 0 -----
        p0 = "1000000";
        p1 = 1;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "000000000001";
        p1 = 1;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "1000000000000";
        p1 = 0;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "9876543210";
        p1 = 5;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "11111111111111111111111111111111111111111111111111";
        p1 = 9192;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "10010010010010010010010010010010010010010010010010";
        p1 = 1217;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING

